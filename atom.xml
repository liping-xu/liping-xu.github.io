<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知道你在改变</title>
  
  <subtitle>许利平</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2025-09-19T06:45:09.627Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>族战</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/2025/09/19/test/"/>
    <id>http://yoursite.com/2025/09/19/test/</id>
    <published>2025-09-19T06:44:23.000Z</published>
    <updated>2025-09-19T06:45:09.627Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p>新电脑迁移测试</p></blockquote><a id="more"></a><p>发布test</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;新电脑迁移测试&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>git多账号设置-github和gitee</title>
    <link href="http://yoursite.com/2025/09/19/git%E5%A4%9A%E8%B4%A6%E5%8F%B7%E8%AE%BE%E7%BD%AE-github%E5%92%8Cgitee/"/>
    <id>http://yoursite.com/2025/09/19/git%E5%A4%9A%E8%B4%A6%E5%8F%B7%E8%AE%BE%E7%BD%AE-github%E5%92%8Cgitee/</id>
    <published>2025-09-19T03:27:50.000Z</published>
    <updated>2025-09-19T04:11:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> git需要从两个不同的网站（分别是github和gitee）仓库拉取代码库，这里拉取失败的原因就是因为账号SSH无法认证的问题，在此作个备忘。</p> <a id="more"></a></blockquote><h1 id="一、生成密钥对"><a href="#一、生成密钥对" class="headerlink" title="一、生成密钥对"></a>一、生成密钥对</h1><p>所谓密钥对是本地git与github或gitee进行连接时使用的RSA非对称加密密钥对，即本地存储一个私钥，给予github或gitee一个公钥，这样每次提交的时候github或gitee都会比对公钥与私钥。比对成功即可正常使用github和gitee拉取代码或push代码。无需输入账号密码。</p><p>1、生成github上的仓库密钥对，通过 -C 参数填写github的邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;365278654@qq.com&quot;</span><br></pre></td></tr></table></figure><p>（需要三次回车，第二次回车可以修改名称）这里可以修改输出rsa的名字</p><p>例如修改为id_xlp_github_rsa等。</p><p>至此我生成了两套rsa文件如下<img src="/2025/09/19/git%E5%A4%9A%E8%B4%A6%E5%8F%B7%E8%AE%BE%E7%BD%AE-github%E5%92%8Cgitee/rsa.jpg" alt="rsa"></p><p>pub中的内容就是公钥。</p><h1 id="二、Github和Gitee的网页配置公钥"><a href="#二、Github和Gitee的网页配置公钥" class="headerlink" title="二、Github和Gitee的网页配置公钥"></a>二、Github和Gitee的网页配置公钥</h1><p> 获取公钥</p><p>在命令行中</p><p>cat ~/.ssh/id_xlp_github_rsa.pub</p><p>将内容copy拷贝进入github和gitee的账户设置里面（这一步自行查找，就在账号的设置页面）。</p><h1 id="三、Git本地配置私钥"><a href="#三、Git本地配置私钥" class="headerlink" title="三、Git本地配置私钥"></a>三、Git本地配置私钥</h1><p>使用下述代码添加本地私钥进本地Git。</p><p>ssh-add ~/.ssh/id_xlp_github_rsa</p><p>ssh-add ~/.ssh/id_xlp_gitee_rsa</p><p>添加完毕后，可以通过以下命令进行验证</p><p>ssh-add -l</p><p>注意，我这里使用的mac配置就此结束，但是很多博客上说需要使用ssh的config文件，以下内容我没有进行操作，可参考</p><p>编辑 ~/.ssh目录下的config文件，如果没有请创建，配置内容如下</p><p>以下是sourcetree自动创建的config内容，可以模仿写下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User liping-xu</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile &#x2F;Users&#x2F;mac&#x2F;.ssh&#x2F;liping-xu-GitHub</span><br><span class="line">    UseKeychain yes</span><br><span class="line">    AddKeysToAgent yes</span><br></pre></td></tr></table></figure><p>gitee</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host gitee.com</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    User 许利平</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile &#x2F;Users&#x2F;mac&#x2F;.ssh&#x2F;id_xlp_gitee_rsa</span><br><span class="line">    UseKeychain yes</span><br><span class="line">    AddKeysToAgent yes</span><br></pre></td></tr></table></figure><p>Host :仓库网站的别名，随意写</p><p>HostName：仓库网站的域名</p><p>User：仓库网站的用户名</p><p>IdentityFile：私钥的绝对路径</p><h1 id="四、测试链接"><a href="#四、测试链接" class="headerlink" title="四、测试链接"></a>四、测试链接</h1><p>可以使用ssh -T 命令检测配置的Host是否联通</p><p>ssh -T github.com</p><p>ssh -T gitee.com</p><p>出现successfully的表示成功。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; git需要从两个不同的网站（分别是github和gitee）仓库拉取代码库，这里拉取失败的原因就是因为账号SSH无法认证的问题，在此作个备忘。&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="git相关操作" scheme="http://yoursite.com/categories/git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS Xcode自定义代码块以及迁移</title>
    <link href="http://yoursite.com/2025/09/19/iOS-Xcode%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E5%9D%97%E4%BB%A5%E5%8F%8A%E8%BF%81%E7%A7%BB/"/>
    <id>http://yoursite.com/2025/09/19/iOS-Xcode%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E5%9D%97%E4%BB%A5%E5%8F%8A%E8%BF%81%E7%A7%BB/</id>
    <published>2025-09-19T02:46:53.000Z</published>
    <updated>2025-09-19T03:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> 自定义代码块（语法糖），自动生成常用的代码块，例如常用的语义词，通用的cell创建方法等。这个在很早之前就设置了相关内容，但是最近更换了Mac电脑，新的Xcode中差点忘记如何设置，在此记录一下。</p> <a id="more"></a></blockquote><h1 id="一、使用方法"><a href="#一、使用方法" class="headerlink" title="一、使用方法"></a>一、使用方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">like</span><br><span class="line">在Xcode中输入pcopy，回车</span><br><span class="line">自动生成</span><br><span class="line">@property (nonatomic, copy) &lt;#Class#&gt; *&lt;#Object#&gt;;</span><br></pre></td></tr></table></figure><h2 id="二、如何自定义代码块"><a href="#二、如何自定义代码块" class="headerlink" title="二、如何自定义代码块"></a>二、如何自定义代码块</h2><p>1、选中一行代码 右键 create code snippet</p><p>2、右上角快速进入</p><p><img src="/2025/09/19/iOS-Xcode%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E5%9D%97%E4%BB%A5%E5%8F%8A%E8%BF%81%E7%A7%BB/%E8%AF%AD%E6%B3%95%E7%B3%96.png" alt="语法糖"></p><p>Completion就是快捷输入方式</p><p>按照要求填写自己需要的提示或者内容</p><h1 id="三、iOS-Xcode-自定义代码块迁移"><a href="#三、iOS-Xcode-自定义代码块迁移" class="headerlink" title="三、iOS Xcode 自定义代码块迁移"></a>三、iOS Xcode 自定义代码块迁移</h1><p>1、Command + Shift + 6，前往如下路径的文件夹</p><p>2、～/Library/Developer/Xcode/UserData/CodeSnippets</p><p>3、把文件夹内部文件copy，粘贴到新电脑的Xcode同样路径下的文件夹中即可</p><p>4、重启Xcode</p><h1 id="四、代码块编写"><a href="#四、代码块编写" class="headerlink" title="四、代码块编写"></a>四、代码块编写</h1><p>这个没啥好说的，只需要注意需要填写的内容改为&lt;#Class#&gt;、&lt;#Object#&gt;替换符即可。</p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>留作个备忘</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 自定义代码块（语法糖），自动生成常用的代码块，例如常用的语义词，通用的cell创建方法等。这个在很早之前就设置了相关内容，但是最近更换了Mac电脑，新的Xcode中差点忘记如何设置，在此记录一下。&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>低版本Xcode上架AppStore需要的准备</title>
    <link href="http://yoursite.com/2025/09/02/%E4%BD%8E%E7%89%88%E6%9C%ACXcode%E4%B8%8A%E6%9E%B6AppStore%E9%9C%80%E8%A6%81%E7%9A%84%E5%87%86%E5%A4%87/"/>
    <id>http://yoursite.com/2025/09/02/%E4%BD%8E%E7%89%88%E6%9C%ACXcode%E4%B8%8A%E6%9E%B6AppStore%E9%9C%80%E8%A6%81%E7%9A%84%E5%87%86%E5%A4%87/</id>
    <published>2025-09-02T05:54:57.000Z</published>
    <updated>2025-09-19T03:25:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> 最近接到一个App上架的需求，但是我的系统版本以及Xcode版本都已经处于版本太低不支持的状态，在这里记录一下相关需要的资料</p> <a id="more"></a></blockquote><h1 id="一、上架报错的第一条反馈"><a href="#一、上架报错的第一条反馈" class="headerlink" title="一、上架报错的第一条反馈"></a>一、上架报错的第一条反馈</h1><h2 id="1-1、处理各种隐私协议在工程的Info-plist文件中添加以下键值对"><a href="#1-1、处理各种隐私协议在工程的Info-plist文件中添加以下键值对" class="headerlink" title="1.1、处理各种隐私协议在工程的Info.plist文件中添加以下键值对"></a>1.1、处理各种隐私协议在工程的Info.plist文件中添加以下键值对</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;NSAppleMusicUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;App需要您的同意,才能访问媒体资料库&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;NSBluetoothPeripheralUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;App需要您的同意,才能访问蓝牙&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;NSCalendarsUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;App需要您的同意,才能访问日历&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;NSCameraUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;App需要您的同意,才能访问相机上传评价图片&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;NSContactsUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;App需要您的同意，才能访问您的联系人&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;NSHealthShareUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;App需要您的同意,才能访问健康分享&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;NSHealthUpdateUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;App需要您的同意,才能访问健康更新 &lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;NSLocationAlwaysAndWhenInUseUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;我们需要通过您的地理位置信息获取您周边的相关店铺数据&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;NSLocationAlwaysUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;App需要您的同意,才能始终访问位置用于定位您的城市名&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;NSLocationUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;App需要您的同意,才能访问位置用于定位您的城市名&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;NSLocationWhenInUseUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;App需要您的同意,用于显示所在城市名称&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;NSMicrophoneUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;App需要您的同意,才能访问麦克风用于语音收索服务&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;NSMotionUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;App需要您的同意,才能访问运动与健身&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;NSPhotoLibraryUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;App需要您的同意,才能访问相册用于上传评价图片&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;NSPhotoLibraryAddUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;App需要您的同意,用于保存图片到手机&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;NSRemindersUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;App需要您的同意,才能访问提醒事项&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;UIRequiredDeviceCapabilities&lt;&#x2F;key&gt;</span><br></pre></td></tr></table></figure><h2 id="1-2-低版本Xcode编译的文件在高版本中编译不通过"><a href="#1-2-低版本Xcode编译的文件在高版本中编译不通过" class="headerlink" title="1.2 低版本Xcode编译的文件在高版本中编译不通过"></a>1.2 低版本Xcode编译的文件在高版本中编译不通过</h2><p>报错的提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang: error: SDK does not contain &#39;libarclite&#39; at the path &#39;&#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer&#x2F;Toolchains&#x2F;XcodeDefault.xctoolchain&#x2F;usr&#x2F;lib&#x2F;arc&#x2F;libarclite_iphoneos.a&#39;; try increasing the minimum deployment target</span><br></pre></td></tr></table></figure><p>大致意思 Xcode中缺失 arclibarclite iphoneos.a 文件</p><p>标注：Xcode版本为Version 12.4 (12D4e)</p><p>系统版本：MacOS Big Sur  版本:11.7.10(20G1427)</p><p>libarclite是Apple提供的用于支持自动引用计数(ARC)的库文件，在较旧的iOS版本中用于运行时提供ARC功能</p><p>这种问题就是Xcode高版本不能向下兼容，缺少相关文件。</p><p>在提示的Path里面添加上这个文件即可。</p><p>资料链接地址：</p><p><a href="https://github.com/survivorsfyh/DevelopmentSupport/tree/main/Libarclite_Files" target="_blank" rel="noopener">https://github.com/survivorsfyh/DevelopmentSupport/tree/main/Libarclite_Files</a></p><h2 id="1-3-如果工程中还有UIWebView的使用的话会审核不通过"><a href="#1-3-如果工程中还有UIWebView的使用的话会审核不通过" class="headerlink" title="1.3 如果工程中还有UIWebView的使用的话会审核不通过"></a>1.3 如果工程中还有UIWebView的使用的话会审核不通过</h2><p>包括三方里面均不可以有UIWebView的使用.</p><blockquote><p><strong>2020年4月起App Store将不再接受使用UIWebView的新App上架、2020年12月起将不再接受使用UIWebView的App更新。</strong></p></blockquote><h2 id="1-4处理-rvm-安装-ruby-时报错-‘-rvm-make-j8"><a href="#1-4处理-rvm-安装-ruby-时报错-‘-rvm-make-j8" class="headerlink" title="1.4处理 rvm 安装 ruby 时报错 ‘__rvm_make -j8"></a>1.4处理 rvm 安装 ruby 时报错 ‘__rvm_make -j8</h2><p>在最新mac电脑安装cocoapods的时候出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error installing cocoapods:</span><br><span class="line">    The last version of securerandom (&gt;&#x3D; 0.3) to support your Ruby &amp; RubyGems was 0.3.2. Try installing it with &#96;gem install securerandom -v 0.3.2&#96; and then running the current command again</span><br><span class="line">    securerandom requires Ruby version &gt;&#x3D; 3.1.0. The current ruby version is 2.6.10.210.</span><br></pre></td></tr></table></figure><p>这里的原因是ruby版本过低。解决办法就是升级ruby，我们这里通过rvm去升级ruby。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm install 3.4.2</span><br></pre></td></tr></table></figure><p>然后报错</p><blockquote><p>_rvm_make -j8</p></blockquote><p>解决办法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm install 3.4.2 --with-openssl-dir&#x3D;$(brew --prefix openssl@1.1)</span><br></pre></td></tr></table></figure><p>然后有的方法需要homebrew，这个安装方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;HEAD&#x2F;install.sh)&quot;</span><br></pre></td></tr></table></figure><p>验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;eval &quot;$(&#x2F;opt&#x2F;homebrew&#x2F;bin&#x2F;brew shellenv)&quot;&#39; &gt;&gt; ~&#x2F;.zshrc</span><br><span class="line">source ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure><p>安装cocoapods</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n &#x2F;usr&#x2F;local&#x2F;bin cocoapods -V</span><br></pre></td></tr></table></figure><p>注意1：-V表示可以看见安装进度</p><p>这一步经常会出现问题，卡住不动或者出错</p><p>卡住不动：墙的原因</p><p>解决办法，替换源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gem sources --remove https:&#x2F;&#x2F;rubygems.org&#x2F;</span><br><span class="line"></span><br><span class="line">gem sources -a https:&#x2F;&#x2F;gems.ruby-china.com&#x2F;</span><br><span class="line"></span><br><span class="line">（淘宝的Ruby镜像已经不更新了）</span><br><span class="line"></span><br><span class="line">查看是否替换成功</span><br><span class="line"></span><br><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><p>安装仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod setup</span><br></pre></td></tr></table></figure><p>拉取pod库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;git&#x2F;CocoaPods&#x2F;Specs.git  ~&#x2F;.cocoapods&#x2F;repos&#x2F;trunk</span><br></pre></td></tr></table></figure><p>这里要是clone不成功的话需要替换中科院的镜像。</p><p>检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search AFNetworking</span><br></pre></td></tr></table></figure><h2 id="1-5-隐私清单的处理"><a href="#1-5-隐私清单的处理" class="headerlink" title="1.5 隐私清单的处理"></a>1.5 隐私清单的处理</h2><p>所有的三方都需要有隐私清单，常见的AFNetworking，SDWebImage，Sanpkit等常见三方都需要创建隐私清单，但是AFNetworking这些常使用的三方已经停止维护了。</p><p>Xcode要求版本：Xcode15+以上。</p><p>解决方案：</p><p>在使用cocoapods后 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p>后手动创建隐私清单</p><p>1、选中pods工程下SDWebImage文件夹</p><p>2、Command+N创建如下文件：App Privacy</p><p>3、下一步后，文件名不用更改，也不能更改，Targets：SDWebImage进行勾选。</p><p>4、确认后，SDWebImage文件夹下会多出PrivacyInfo文件</p><p>5、选中PrivacyInfo文件往里面添加隐私内容，内容如下，复制替换即可</p><p>注意1、(本质上是一个plist文件，内容不一样，需要去github上去找相应对的info文件)。</p><p>注意2、每次pod install 都会覆盖掉创建的PrivacyInfo文件。</p><p>注意3、每个三方的隐私清单不一样，自己去github上找最新的隐私清单，以下清单为2025年9月15日最新三方隐私清单</p><p>AFNetworking</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-&#x2F;&#x2F;Apple&#x2F;&#x2F;DTD PLIST 1.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.apple.com&#x2F;DTDs&#x2F;PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;plist version&#x3D;&quot;1.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dict&gt;</span><br><span class="line"></span><br><span class="line">    &lt;key&gt;NSPrivacyAccessedAPITypes&lt;&#x2F;key&gt;</span><br><span class="line"></span><br><span class="line">    &lt;array&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 示例：根据 AFNetworking 实际调用的 API 类型声明 --&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dict&gt;</span><br><span class="line"></span><br><span class="line">        &lt;key&gt;NSPrivacyAccessedAPIType&lt;&#x2F;key&gt;</span><br><span class="line"></span><br><span class="line">        &lt;string&gt;NSPrivacyAccessedAPICategoryUserDefaults&lt;&#x2F;string&gt;</span><br><span class="line"></span><br><span class="line">        &lt;key&gt;NSPrivacyAccessedAPITypeReasons&lt;&#x2F;key&gt;</span><br><span class="line"></span><br><span class="line">        &lt;array&gt;</span><br><span class="line"></span><br><span class="line">          &lt;string&gt;CA92.1&lt;&#x2F;string&gt; &lt;!-- 必须填写苹果预定义的声明代码 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;array&gt;</span><br><span class="line"></span><br><span class="line">      &lt;&#x2F;dict&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;array&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;dict&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;plist&gt;</span><br></pre></td></tr></table></figure><p>SDWebImage的隐私清单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-&#x2F;&#x2F;Apple&#x2F;&#x2F;DTD PLIST 1.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.apple.com&#x2F;DTDs&#x2F;PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;plist version&#x3D;&quot;1.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;dict&gt;</span><br><span class="line"></span><br><span class="line">&lt;key&gt;NSPrivacyTracking&lt;&#x2F;key&gt;</span><br><span class="line"></span><br><span class="line">&lt;false&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;key&gt;NSPrivacyCollectedDataTypes&lt;&#x2F;key&gt;</span><br><span class="line"></span><br><span class="line">&lt;array&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;key&gt;NSPrivacyTrackingDomains&lt;&#x2F;key&gt;</span><br><span class="line"></span><br><span class="line">&lt;array&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;key&gt;NSPrivacyAccessedAPITypes&lt;&#x2F;key&gt;</span><br><span class="line"></span><br><span class="line">&lt;array&gt;</span><br><span class="line"></span><br><span class="line">&lt;dict&gt;</span><br><span class="line"></span><br><span class="line">&lt;key&gt;NSPrivacyAccessedAPIType&lt;&#x2F;key&gt;</span><br><span class="line"></span><br><span class="line">&lt;string&gt;NSPrivacyAccessedAPICategoryFileTimestamp&lt;&#x2F;string&gt;</span><br><span class="line"></span><br><span class="line">&lt;key&gt;NSPrivacyAccessedAPITypeReasons&lt;&#x2F;key&gt;</span><br><span class="line"></span><br><span class="line">&lt;array&gt;</span><br><span class="line"></span><br><span class="line">&lt;string&gt;C617.1&lt;&#x2F;string&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;array&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;dict&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;array&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;dict&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;plist&gt;</span><br></pre></td></tr></table></figure><p>SnapKit的隐私清单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-&#x2F;&#x2F;Apple&#x2F;&#x2F;DTD PLIST 1.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.apple.com&#x2F;DTDs&#x2F;PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;plist version&#x3D;&quot;1.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;dict&gt;</span><br><span class="line"></span><br><span class="line">&lt;key&gt;NSPrivacyTracking&lt;&#x2F;key&gt;</span><br><span class="line"></span><br><span class="line">&lt;false&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;key&gt;NSPrivacyAccessedAPITypes&lt;&#x2F;key&gt;</span><br><span class="line"></span><br><span class="line">&lt;array&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;key&gt;NSPrivacyCollectedDataTypes&lt;&#x2F;key&gt;</span><br><span class="line"></span><br><span class="line">&lt;array&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;key&gt;NSPrivacyTrackingDomains&lt;&#x2F;key&gt;</span><br><span class="line"></span><br><span class="line">&lt;array&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;dict&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;plist&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 最近接到一个App上架的需求，但是我的系统版本以及Xcode版本都已经处于版本太低不支持的状态，在这里记录一下相关需要的资料&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS启动图和图标适配</title>
    <link href="http://yoursite.com/2023/07/25/iOS%E5%90%AF%E5%8A%A8%E5%9B%BE%E5%92%8C%E5%9B%BE%E6%A0%87%E9%80%82%E9%85%8D/"/>
    <id>http://yoursite.com/2023/07/25/iOS%E5%90%AF%E5%8A%A8%E5%9B%BE%E5%92%8C%E5%9B%BE%E6%A0%87%E9%80%82%E9%85%8D/</id>
    <published>2023-07-25T09:19:16.000Z</published>
    <updated>2023-07-25T09:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> 本文将iPhone的型号和启动图和图标做一个对比。方便以后给出尺寸</p> <a id="more"></a></blockquote><h2 id="1、屏幕分辨率识别"><a href="#1、屏幕分辨率识别" class="headerlink" title="1、屏幕分辨率识别"></a>1、屏幕分辨率识别</h2><p><img src="/2023/07/25/iOS%E5%90%AF%E5%8A%A8%E5%9B%BE%E5%92%8C%E5%9B%BE%E6%A0%87%E9%80%82%E9%85%8D/Picture-1@2x.png" alt="Picture-1@2x"></p><h2 id="2、启动图适配"><a href="#2、启动图适配" class="headerlink" title="2、启动图适配"></a>2、启动图适配</h2><p><img src="/2023/07/25/iOS%E5%90%AF%E5%8A%A8%E5%9B%BE%E5%92%8C%E5%9B%BE%E6%A0%87%E9%80%82%E9%85%8D/Picture-2@2x.webp" alt="Picture-2@2x"></p><h2 id="3、app图标适配"><a href="#3、app图标适配" class="headerlink" title="3、app图标适配"></a>3、app图标适配</h2><p><img src="/2023/07/25/iOS%E5%90%AF%E5%8A%A8%E5%9B%BE%E5%92%8C%E5%9B%BE%E6%A0%87%E9%80%82%E9%85%8D/Picture-3@2x.png" alt="Picture-3@2x"></p><p>以上图片对比一下即可。</p><h2 id="4、PT与PX的区别"><a href="#4、PT与PX的区别" class="headerlink" title="4、PT与PX的区别"></a>4、PT与PX的区别</h2><p>px就是表示pixel，像素，是屏幕上显示数据的最基本的点；</p><p>pt就是point，是印刷行业常用单位，等于1/72英寸。</p><p>px是一个点，它不是自然界的长度单位，谁能说出一个“点”有多长多大么？可以画的很小，也可以很大。如果点很小，那画面就清晰，我们称它为“分辨率高”，反之，就是“分辨率低”。所以，“点”的大小是会“变”的，也称为“相对长度”。</p><p>pt全称为point，但中文不叫“点”，查金山词霸可以看到，确切的说法是一个专用的印刷单位“磅”，大小为1/72英寸。所以它是一个自然界标准的长度单位，也称为“绝对长度”。</p><p>因此就有这样的说法，pixel是相对大小，而point是绝对大小。</p><p>最后整理一下所有出现过的单位：</p><p>px：pixel，像素，屏幕上显示的最小单位，用于网页设计，直观方便；</p><p>pt：point，是一个标准的长度单位，1pt＝1/72英寸，用于印刷业，非常简单易用；</p><p>em：即％，在CSS中，1em＝100％，是一个比率，结合CSS继承关系使用，具有灵活性。</p><p>PPI（DPI）：pixel（dot）per inch，每英寸的像素（点）数，是一个率，表示了“清晰度”，“精度”PX和PT转换的公式：</p><p>以前在文章中介绍过PX和PT的转换规则，其实很简单，pt=px乘以3/4。比如12px×3/4=9pt大小。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 本文将iPhone的型号和启动图和图标做一个对比。方便以后给出尺寸&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS 刘海屏适配篇</title>
    <link href="http://yoursite.com/2023/07/25/iOS-%E5%88%98%E6%B5%B7%E5%B1%8F%E9%80%82%E9%85%8D%E7%AF%87/"/>
    <id>http://yoursite.com/2023/07/25/iOS-%E5%88%98%E6%B5%B7%E5%B1%8F%E9%80%82%E9%85%8D%E7%AF%87/</id>
    <published>2023-07-25T09:01:28.000Z</published>
    <updated>2025-09-19T02:44:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> 这篇主要内容是归纳总结iOS的屏幕以及相关适配</p> <a id="more"></a></blockquote><h2 id="1、问题归因"><a href="#1、问题归因" class="headerlink" title="1、问题归因"></a>1、问题归因</h2><p>本文主要是分析了遇到的问题，比并提供了解决方案，最后总结了常用的准确获取 iPhone 状态栏、导航栏、TabBar高度的方法。</p><p>问题出现的根源是，获取 「状态栏+导航栏高度」的方法采用的是类似于下面的判断是否为刘海屏，然后返回固定值的写法。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 状态栏高度，iPhoneX 是判断是否为刘海屏</span></span><br><span class="line"><span class="meta">#define StatusBar_Height (iPhoneX ? 44.0f : 20.0f)</span></span><br></pre></td></tr></table></figure><p>现在早些时间，这种方法确实是没错的，但是在 iOS 14 系统之后，刘海屏手机的状态栏高度就不再统一是 44 了。下表是 iOS 15.2 上各刘海屏机型的状态栏高度，其中 iPhone 13 系列和 iPhone 12 系列是一致的，就不再重复列举。</p><table><thead><tr><th align="center">机型</th><th align="center">状态栏高度（pt）</th></tr></thead><tbody><tr><td align="center">iPhone XR/11</td><td align="center">48</td></tr><tr><td align="center">iPhone X/11 Pro/ 11 Pro Max/12 mini</td><td align="center">44</td></tr><tr><td align="center">iPhone 12/12 Pro/Pro Max</td><td align="center">47</td></tr><tr><td align="center">iPhone13/13Pro/Pro Max</td><td align="center">47</td></tr><tr><td align="center">iPhone14/14Pro/Pro Max</td><td align="center">59</td></tr><tr><td align="center">非刘海屏</td><td align="center">20</td></tr></tbody></table><h2 id="2、利用系统方法获取状态栏高度"><a href="#2、利用系统方法获取状态栏高度" class="headerlink" title="2、利用系统方法获取状态栏高度"></a>2、利用系统方法获取状态栏高度</h2><p>因为上面那种写死的方法已经不能满足我们的需求了，于是我们采用系统的方法来获取。在 iOS 13.0 之前，我们可以通过 <code>UIApplication</code> 单例中的 <code>statusBarFrame</code> 属性获取状态状态栏改度，代码如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">UIApplication</span> sharedApplication].statusBarFrame.size.height;</span><br></pre></td></tr></table></figure><p>但是在 iOS 13.0 之后，<code>UIApplication</code> 单例中的 <code>statusBarFrame</code> 属性被废弃⚠️了。官方希望能我们使用 <code>UIStatusBarManager</code> 类中的 <code>statusBarFrame</code> 熟悉来进行获取，代码如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">13.0</span>, *)) &#123;</span><br><span class="line"><span class="built_in">NSSet</span> *set = [<span class="built_in">UIApplication</span> sharedApplication].connectedScenes;</span><br><span class="line">    <span class="built_in">UIWindowScene</span> *windowScene = [set anyObject];</span><br><span class="line">    <span class="built_in">UIStatusBarManager</span> *statusBarManager = windowScene.statusBarManager;</span><br><span class="line">    <span class="keyword">return</span> statusBarManager.statusBarFrame.size.height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、代码模版"><a href="#3、代码模版" class="headerlink" title="3、代码模版"></a>3、代码模版</h2><p>为了能正确获取系统顶部和底部相关元素（导航栏和安全区）的高度，这里提供了获取顶部和底部安全区、顶部状态栏和导航栏、底部 tabBar。</p><h3 id="3-1-Objective-C-版本"><a href="#3-1-Objective-C-版本" class="headerlink" title="3.1 Objective-C 版本"></a>3.1 Objective-C 版本</h3><p>在 <code>UIDevice+VGAddition.h</code> 中，对各方法进行了声明。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIDevice</span> (<span class="title">VGAddition</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 顶部安全区高度</span></span><br><span class="line">+ (<span class="built_in">CGFloat</span>)vg_safeDistanceTop;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 底部安全区高度</span></span><br><span class="line">+ (<span class="built_in">CGFloat</span>)vg_safeDistanceBottom;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 顶部状态栏高度（包括安全区）</span></span><br><span class="line">+ (<span class="built_in">CGFloat</span>)vg_statusBarHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 导航栏高度</span></span><br><span class="line">+ (<span class="built_in">CGFloat</span>)vg_navigationBarHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 状态栏+导航栏的高度</span></span><br><span class="line">+ (<span class="built_in">CGFloat</span>)vg_navigationFullHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 底部导航栏高度</span></span><br><span class="line">+ (<span class="built_in">CGFloat</span>)vg_tabBarHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 底部导航栏高度（包括安全区）</span></span><br><span class="line">+ (<span class="built_in">CGFloat</span>)vg_tabBarFullHeight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>在 <code>UIDevice+VGAddition.m</code> 中，对声明的各方法进行了实现。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"UIDevice+VGAddition.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIDevice</span> (<span class="title">VGAddition</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 顶部安全区高度</span></span><br><span class="line">+ (<span class="built_in">CGFloat</span>)vg_safeDistanceTop &#123;</span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">13.0</span>, *)) &#123;</span><br><span class="line">        <span class="built_in">NSSet</span> *set = [<span class="built_in">UIApplication</span> sharedApplication].connectedScenes;</span><br><span class="line">        <span class="built_in">UIWindowScene</span> *windowScene = [set anyObject];</span><br><span class="line">        <span class="built_in">UIWindow</span> *window = windowScene.windows.firstObject;</span><br><span class="line">        <span class="keyword">return</span> window.safeAreaInsets.top;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (@available(iOS <span class="number">11.0</span>, *)) &#123;</span><br><span class="line">        <span class="built_in">UIWindow</span> *window = [<span class="built_in">UIApplication</span> sharedApplication].windows.firstObject;</span><br><span class="line">        <span class="keyword">return</span> window.safeAreaInsets.top;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 底部安全区高度</span></span><br><span class="line">+ (<span class="built_in">CGFloat</span>)vg_safeDistanceBottom &#123;</span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">13.0</span>, *)) &#123;</span><br><span class="line">        <span class="built_in">NSSet</span> *set = [<span class="built_in">UIApplication</span> sharedApplication].connectedScenes;</span><br><span class="line">        <span class="built_in">UIWindowScene</span> *windowScene = [set anyObject];</span><br><span class="line">        <span class="built_in">UIWindow</span> *window = windowScene.windows.firstObject;</span><br><span class="line">        <span class="keyword">return</span> window.safeAreaInsets.bottom;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (@available(iOS <span class="number">11.0</span>, *)) &#123;</span><br><span class="line">        <span class="built_in">UIWindow</span> *window = [<span class="built_in">UIApplication</span> sharedApplication].windows.firstObject;</span><br><span class="line">        <span class="keyword">return</span> window.safeAreaInsets.bottom;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 顶部状态栏高度（包括安全区）</span></span><br><span class="line">+ (<span class="built_in">CGFloat</span>)vg_statusBarHeight &#123;</span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">13.0</span>, *)) &#123;</span><br><span class="line">        <span class="built_in">NSSet</span> *set = [<span class="built_in">UIApplication</span> sharedApplication].connectedScenes;</span><br><span class="line">        <span class="built_in">UIWindowScene</span> *windowScene = [set anyObject];</span><br><span class="line">        <span class="built_in">UIStatusBarManager</span> *statusBarManager = windowScene.statusBarManager;</span><br><span class="line">        <span class="keyword">return</span> statusBarManager.statusBarFrame.size.height;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">UIApplication</span> sharedApplication].statusBarFrame.size.height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 导航栏高度</span></span><br><span class="line">+ (<span class="built_in">CGFloat</span>)vg_navigationBarHeight &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">44.0</span>f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 状态栏+导航栏的高度</span></span><br><span class="line">+ (<span class="built_in">CGFloat</span>)vg_navigationFullHeight &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">UIDevice</span> vg_statusBarHeight] + [<span class="built_in">UIDevice</span> vg_navigationBarHeight];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 底部导航栏高度</span></span><br><span class="line">+ (<span class="built_in">CGFloat</span>)vg_tabBarHeight &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">49.0</span>f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 底部导航栏高度（包括安全区）</span></span><br><span class="line">+ (<span class="built_in">CGFloat</span>)vg_tabBarFullHeight &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">UIDevice</span> vg_tabBarHeight] + [<span class="built_in">UIDevice</span> vg_safeDistanceBottom];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="3-2-Swift-版本"><a href="#3-2-Swift-版本" class="headerlink" title="3.2 Swift 版本"></a>3.2 Swift 版本</h3><p>UIDevice+VGAddition.swift</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIDevice</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 顶部安全区高度</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">vg_safeDistanceTop</span><span class="params">()</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> #available(iOS <span class="number">13.0</span>, *) &#123;</span><br><span class="line">            <span class="keyword">let</span> scene = <span class="type">UIApplication</span>.shared.connectedScenes.first</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> windowScene = scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> window = windowScene.windows.first <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">            <span class="keyword">return</span> window.safeAreaInsets.top</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> #available(iOS <span class="number">11.0</span>, *) &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> window = <span class="type">UIApplication</span>.shared.windows.first <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">            <span class="keyword">return</span> window.safeAreaInsets.top</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 底部安全区高度</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">vg_safeDistanceBottom</span><span class="params">()</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> #available(iOS <span class="number">13.0</span>, *) &#123;</span><br><span class="line">            <span class="keyword">let</span> scene = <span class="type">UIApplication</span>.shared.connectedScenes.first</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> windowScene = scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> window = windowScene.windows.first <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">            <span class="keyword">return</span> window.safeAreaInsets.bottom</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> #available(iOS <span class="number">11.0</span>, *) &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> window = <span class="type">UIApplication</span>.shared.windows.first <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">            <span class="keyword">return</span> window.safeAreaInsets.bottom</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 顶部状态栏高度（包括安全区）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">vg_statusBarHeight</span><span class="params">()</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> statusBarHeight: <span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> #available(iOS <span class="number">13.0</span>, *) &#123;</span><br><span class="line">            <span class="keyword">let</span> scene = <span class="type">UIApplication</span>.shared.connectedScenes.first</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> windowScene = scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> statusBarManager = windowScene.statusBarManager <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">            statusBarHeight = statusBarManager.statusBarFrame.height</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            statusBarHeight = <span class="type">UIApplication</span>.shared.statusBarFrame.height</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> statusBarHeight</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 导航栏高度</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">vg_navigationBarHeight</span><span class="params">()</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">44.0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 状态栏+导航栏的高度</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">vg_navigationFullHeight</span><span class="params">()</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIDevice</span>.vg_statusBarHeight() + <span class="type">UIDevice</span>.vg_navigationBarHeight()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 底部导航栏高度</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">vg_tabBarHeight</span><span class="params">()</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">49.0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 底部导航栏高度（包括安全区）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">vg_tabBarFullHeight</span><span class="params">()</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIDevice</span>.vg_tabBarHeight() + <span class="type">UIDevice</span>.vg_safeDistanceBottom()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 这篇主要内容是归纳总结iOS的屏幕以及相关适配&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS首页隐藏导航栏的方法</title>
    <link href="http://yoursite.com/2023/07/24/iOS%E9%A6%96%E9%A1%B5%E9%9A%90%E8%97%8F%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2023/07/24/iOS%E9%A6%96%E9%A1%B5%E9%9A%90%E8%97%8F%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2023-07-24T09:29:48.000Z</published>
    <updated>2025-09-19T02:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> 在项目中经常碰到首页顶部是无限轮播,需要靠最上面显示.有的设置导航栏为透明等一系列的方法,这个可以借助第三方.或者干脆简单粗暴的直接隐藏掉导航栏.可是push到下一个页面的时候是需要导航栏的,如何做了,这里给出两种方法.</p> <a id="more"></a></blockquote><h2 id="1、动画隐藏"><a href="#1、动画隐藏" class="headerlink" title="1、动画隐藏"></a>1、动画隐藏</h2><p>-注意这里一定要用动画的方式隐藏导航栏,这样在使用滑动返回手势的时候效果最好,和上面动图一致.这样做有一个缺点就是在切换tabBar的时候有一个导航栏向上消失的动画.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewWillAppear:(BOOL)animated </span><br><span class="line">&#123; </span><br><span class="line">[super viewWillAppear:animated];  </span><br><span class="line">  [self.navigationController setNavigationBarHidden:YES animated:YES]; </span><br><span class="line">&#125; </span><br><span class="line">- (void)viewWillDisappear:(BOOL)animated </span><br><span class="line">&#123; </span><br><span class="line">[super viewWillDisappear:animated];  </span><br><span class="line">[self.navigationController setNavigationBarHidden:NO animated:YES]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、代理隐藏"><a href="#2、代理隐藏" class="headerlink" title="2、代理隐藏"></a>2、代理隐藏</h2><p>设置self为导航控制器的代理,实现代理方法,在将要显示控制器中设置导航栏隐藏和显示,使用这种方式不仅完美切合滑动返回手势,同时也解决了切换tabBar的时候,导航栏动态隐藏的问题.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@interface WLHomePageController () &lt;UINavigationControllerDelegate&gt; </span><br><span class="line"></span><br><span class="line">@end </span><br><span class="line">@implementation WLHomePageController </span><br><span class="line">#pragma mark - lifeCycle</span><br><span class="line">- (void)viewDidLoad </span><br><span class="line">&#123; </span><br><span class="line">[super viewDidLoad];  </span><br><span class="line">*&#x2F;&#x2F; 设置导航控制器的代理为self </span><br><span class="line">self.navigationController.delegate &#x3D; self; </span><br><span class="line">&#125; </span><br><span class="line">#pragma mark - UINavigationControllerDelegate *&#x2F;&#x2F; 将要显示控制器* </span><br><span class="line">- (void)navigationController:(UINavigationController *)navigationController willShowViewController:(UIViewController *)viewController animated:(BOOL)animated </span><br><span class="line">&#123; </span><br><span class="line">*&#x2F;&#x2F; 判断要显示的控制器是否是自己</span><br><span class="line">*BOOL isShowHomePage &#x3D; [viewController isKindOfClass:[self class]];</span><br><span class="line">[self.navigationController setNavigationBarHidden:isShowHomePage animated:YES]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 在项目中经常碰到首页顶部是无限轮播,需要靠最上面显示.有的设置导航栏为透明等一系列的方法,这个可以借助第三方.或者干脆简单粗暴的直接隐藏掉导航栏.可是push到下一个页面的时候是需要导航栏的,如何做了,这里给出两种方法.&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS13以后使用自定义VC作为根视图</title>
    <link href="http://yoursite.com/2023/07/24/iOS13%E4%BB%A5%E5%90%8E%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89VC%E4%BD%9C%E4%B8%BA%E6%A0%B9%E8%A7%86%E5%9B%BE/"/>
    <id>http://yoursite.com/2023/07/24/iOS13%E4%BB%A5%E5%90%8E%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89VC%E4%BD%9C%E4%B8%BA%E6%A0%B9%E8%A7%86%E5%9B%BE/</id>
    <published>2023-07-24T08:42:41.000Z</published>
    <updated>2025-09-19T02:44:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> iOS13以后不可以在Appdelegate里面创建根视图，只能在SceneDelegate中创建。</p> <a id="more"></a></blockquote><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在iOS 13（及以后版本）上，SceneDelegate将负责AppDelegate的某些功能。 最重要的是，<em>window</em>（窗口）的概念已被<em>scene</em>（场景）的概念所代替。 一个应用程序可以具有不止一个场景，而一个场景现在可以作为您应用程序的用户界面和内容的载体（背景）。具体点就是Appdelegate中<code>windows</code>这个概念被转移到SceneDelegate中。导致之前的代码不在合适，但是可以强行改回</p><h3 id="AppDelegate"><a href="#AppDelegate" class="headerlink" title="AppDelegate"></a>AppDelegate</h3><p>iOS13之前做根视图的方法:</p><p>在AppDelegate中使用如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">UIViewController *vc &#x3D; [[UIViewController alloc] init];</span><br><span class="line"></span><br><span class="line">UINavigationController *na &#x3D; [[UINavigationController alloc] initWithRootViewController:vc];</span><br><span class="line"></span><br><span class="line">self.window.rootViewController &#x3D; na;</span><br><span class="line"></span><br><span class="line">self.window &#x3D; [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];</span><br><span class="line"></span><br><span class="line">self.window.backgroundColor &#x3D; [UIColor whiteColor];</span><br><span class="line"></span><br><span class="line">[self.window makeKeyAndVisible];</span><br></pre></td></tr></table></figure><p>你可能对AppDelegate已经熟悉，他是iOS app的入口，<code>application(_:didFinishLaunchingWithOptions:)</code>是你的app启动后系统调用的第一个函数。</p><p><code>AppDelegate</code>类实现了UIKit库中的<code>UIApplicationDelegate</code> 协议。而到了iOS13 <code>AppDelegate</code>的角色将会发生变化，后面我们会详细讨论。</p><p>下面是你在iOS12中一般会在AppDelegate中做的事情：</p><ul><li>创建app的第一个view controller也就是 rootViewController</li><li>配置并启动一些像日志记录和云服务之类的组件</li><li>注册推送通知处理程序，并响应发送到app的推送通知</li><li>响应应用程序生命周期事件，例如进入后台，恢复应用程序或退出应用程序（终止）</li></ul><p>在上面的代码中，我们创建一个ViewController,并将其放在navigation controller中。然后将其分配给UIWindow对象的rootViewController属性。 这个<code>window</code>对象是AppDelegate的属性，它是我们的应用的一个窗口。</p><p>应用程序的<em>window</em>是一个重要的概念。 本质上，窗口就是应用程序，大多数iOS应用程序只有一个窗口。 它包含您应用的用户界面（UI），将事件调度到视图，并提供了一个主要背景层来显示您的应用内容。 从某种意义上说，“ Windows”的概念就是微软定义的窗口，而在iOS上，这个概念没有什么不同。 （谢谢，Xerox！）</p><p>好了，下面让我们继续SceneDelegate。</p><blockquote><p>如果“窗口”的概念仍然不了解，请查看iPhone上的应用程序切换器。 双击Home键或从iPhone底部向上滑动，然后您会看到当前正在运行的应用程序的窗口。 这就是应用程序切换器。</p></blockquote><h3 id="SceneDelegate"><a href="#SceneDelegate" class="headerlink" title="SceneDelegate"></a>SceneDelegate</h3><p>在iOS 13（及以后版本）上，SceneDelegate将负责AppDelegate的某些功能。 最重要的是，<em>window</em>（窗口）的概念已被<em>scene</em>（场景）的概念所代替。 一个应用程序可以具有不止一个场景，而一个场景现在可以作为您应用程序的用户界面和内容的载体（背景）。</p><p>尤其是一个具有多场景的App的概念很有趣，因为它使您可以在iOS和iPadOS上构建多窗口应用程序。 例如，文档编辑器App中的每个文本文档都可以有自己的场景。 用户还可以创建场景的副本，同时运行一个应用程序的多个实例（类似多开，就是分屏的概念，在general中有这个选项）。</p><p>在Xcode 11中有三个地方可以明显地看到SceneDelegate的身影：</p><ol><li>现在，一个新的iOS项目会自动创建一个<code>SceneDelegate</code>类，其中包括我们熟悉的生命周期事件，例如active，resign和disconnect。</li><li>AppDelegate类中多了两个与“scene sessions”相关的新方法：<code>application(_:configurationForConnecting:options:)</code> 和 <code>application(_:didDiscardSceneSessions:)</code></li><li>Info.plist文件中提供了”Application Scene Manifest“配置项，用于配置App的场景，包括它们的场景配置名，delegate类名和storyboard</li></ol><p>让我们一次开看一看。</p><h4 id="1、SceneDelegate-Class"><a href="#1、SceneDelegate-Class" class="headerlink" title="1、SceneDelegate Class"></a>1、SceneDelegate Class</h4><p>首先，SceneDelegate类：</p><p><img src="/2023/07/24/iOS13%E4%BB%A5%E5%90%8E%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89VC%E4%BD%9C%E4%B8%BA%E6%A0%B9%E8%A7%86%E5%9B%BE/Root-1@2x.png" alt="Root-1@2x"></p><p>SceneDelegate的最重要的函数是：<code>scene(_:willConnectTo:options:)</code>。 在某种程度上，它与iOS 12上的 <code>application(_:didFinishLaunchingWithOptions:)</code> 函数的作用最相似。当将场景添加到app中时<code>scene(_:willConnectTo:options:)</code>函数会被调用的，因此这里是配置场景的最理想地方。 在上面的代码中，我们手动地设置了视图控制器堆栈，稍后会进行详细介绍。</p><p>这里需要特别注意的是，“SceneDelegate”采用了协议模式，并且这个delegate通常会响应任何场景。 您使用一个Delegate来配置App中的所有场景。</p><p><code>SceneDelegate</code> 还具有下面这些函数:</p><ul><li><code>sceneDidDisconnect(_:)</code> 当场景与app断开连接是调用（注意，以后它可能被重新连接）</li><li><code>sceneDidBecomeActive(_:)</code> 当用户开始与场景进行交互（例如从应用切换器中选择场景）时，会调用</li><li><code>sceneWillResignActive(_:)</code> 当用户停止与场景交互（例如通过切换器切换到另一个场景）时调用</li><li><code>sceneWillEnterForeground(_:)</code> 当场景变成活动窗口时调用，即从后台状态变成开始或恢复状态</li><li><code>sceneDidEnterBackground(_:)</code> 当场景进入后台时调用，即该应用已最小化但仍存活在后台中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">看到函数的对称性了吗？ Active&#x2F;inactive, background&#x2F;foreground, 和 “disconnect”. 。 这些是任何应用程序的典型生命周期事件。</span><br></pre></td></tr></table></figure><h4 id="2、AppDelegate中的Scene-Sessions"><a href="#2、AppDelegate中的Scene-Sessions" class="headerlink" title="2、AppDelegate中的Scene Sessions"></a>2、AppDelegate中的Scene Sessions</h4><p>在iOS13中AppDelegate中有两个管理Senen Session的代理函数。在您的应用创建scene（场景）后，“scene session”对象将跟踪与该场景相关的所有信息。</p><p>这两个函数是:</p><ul><li><code>application(_:configurationForConnecting:options:)</code>, 会返回一个创建场景时需要的UISceneConfiguration对象</li><li><code>application(_:didDiscardSceneSessions:)</code>, 当用户通过“应用切换器”关闭一个或多个场景时会被调用</li></ul><p>目前，SceneSession被用于指定场景，例如“外部显示” 或“ CarPlay” 。 它还可用于还原场景的状态，如果您想使用【状态还原】，SceneSession将非常有用。 状态还原允许您在应用启动之间保留并重新创建UI。 您还可以将用户信息存储到场景会话中，它是一个可以放入任何内容的字典。</p><p><code>application(_:didDiscardSceneSessions:)</code>很简单。 当用户通过“应用程序切换器”关闭一个或多个场景时，即会调用该方法。 您可以在该函数中销毁场景所使用的资源，因为不会再需要它们。</p><p>了解<code>application(_:didDiscardSceneSessions:)</code>与<code>sceneDidDisconnect（_ :)</code>的区别很重要，后者仅在场景断开连接时调用，不会被丢弃，它可能会重新连接。而<code>application（_：didDiscardSceneSessions：）</code>发生在使用【应用程序切换器】退出场景时。</p><h4 id="3、Info-plist-中的Application-Scene-Manifest"><a href="#3、Info-plist-中的Application-Scene-Manifest" class="headerlink" title="3、Info.plist 中的Application Scene Manifest"></a>3、Info.plist 中的Application Scene Manifest</h4><p>您的应用支持的每个场景都需要在“Application Scene Manifest”（应用场景清单）中声明。 简而言之，清单列出了您的应用支持的每个场景。 大多数应用程序只有一个场景，但是您可以创建更多场景，例如用于响应推送通知或特定操作的特定场景。</p><p>Application Scene Manifest清单是Info.plist文件的一项，都知道该文件包含App的配置信息。 Info.plist包含诸如App的名称，版本，支持的设备方向以及现在支持的不同场景等配置。</p><p>请务必注意，您声明的是会话的“类型”，而不是会话实例。 您的应用程序可以支持一个场景，然后创建该场景的副本，来实现【多窗口】应用程序。</p><p>下面看一下的 <code>Info.plist</code>中清单的一些配置:</p><p><img src="/2023/07/24/iOS13%E4%BB%A5%E5%90%8E%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89VC%E4%BD%9C%E4%B8%BA%E6%A0%B9%E8%A7%86%E5%9B%BE/Root-2@2x.png" alt="Root-2@2x"></p><p>在红框内，您会看到Application Scene Manifest 这一条。 在它下面一条是Enable Multiple Windows，需要将其设置为“ YES”以支持多个窗口。 再往下<em>Application Session Role</em>的值是一个数组，用于在应用程序中声明场景。 你也可以在数组中添加一条【外部屏幕】的场景声明。</p><p>最重要的信息保存在<em>Application Session Role</em>数组中。 从中我们可以看到以下内容：</p><ul><li>Configuration的名称，必须是唯一的</li><li>场景的代理类名，通常为<code>SceneDelegate</code>。</li><li>场景用于创建初始UI的storyboard名称</li></ul><p>Storyboard名称这一项可能使您想起<em>Main Interface</em>设置，该设置可以在Xcode 12项目的Project Properties配置中找到。 现在，在iOS应用中，你可以在此处设置或更改主Storyboard名称。</p><p>AppDelegate中的SceneDelegate、UISceneSession和Application Scene Manifest是如何一起创建多窗口应用的呢？</p><ul><li>首先，我们看<code>SceneDelegate</code>类。 它管理场景的生命周期，处理各种响应，诸如 <code>sceneDidBecomeActive(_:)</code> and <code>sceneDidEnterBackground(_:)</code>之类的事件。</li><li>然后，我们再看看<code>AppDelegate</code>类中的新函数。 它管理场景会话（scene sessions），提供场景的配置数据，并响应用户丢弃场景的事件。</li><li>最后，我们看了一下<em>Application Scene Manifest</em>。 它列出了您的应用程序支持的场景，并将它们连接到delegate类并初始化storyboard。</li></ul><h3 id="在SwiftUI和OC中如何使用Scene-Delegate"><a href="#在SwiftUI和OC中如何使用Scene-Delegate" class="headerlink" title="在SwiftUI和OC中如何使用Scene Delegate"></a>在SwiftUI和OC中如何使用Scene Delegate</h3><p>首先，SwiftUI项目中“<em>Application Scene Manifest</em> ”将长这样：</p><p><img src="/2023/07/24/iOS13%E4%BB%A5%E5%90%8E%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89VC%E4%BD%9C%E4%B8%BA%E6%A0%B9%E8%A7%86%E5%9B%BE/Root-2@2x.png" alt="Root-2@2x"></p><p>特别注意，配置中没有设置“Storyboard Name”这一项。 请记住，如果要支持多个窗口，则需要将<em>Enable Multiple Windows</em>设置为<code>YES</code>。</p><p>我们将跳过“ AppDelegate”，因为它相当标准。在SwiftUI项目中，只会返回“true”。</p><p>接下来是<code>SceneDelegate</code>类。 正如我们之前讨论的，SceneDelegate负责设置您应用中的场景，以及设置首个页面。</p><p>像下面一样:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SceneDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIWindowSceneDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> window: <span class="type">UIWindow?</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scene</span><span class="params">(<span class="number">_</span> scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> contentView = <span class="type">ContentView</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> windowScene = scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> window = <span class="type">UIWindow</span>(windowScene: windowScene)</span><br><span class="line">            window.rootViewController = <span class="type">UIHostingController</span>(rootView: contentView)</span><br><span class="line">            <span class="keyword">self</span>.window = window</span><br><span class="line">            window.makeKeyAndVisible()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- (void)scene:(UIScene *)scene willConnectToSession:(UISceneSession *)session options:(UISceneConnectionOptions *)connectionOptions &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Use this method to optionally configure and attach the UIWindow &#96;window&#96; to the provided UIWindowScene &#96;scene&#96;.</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; If using a storyboard, the &#96;window&#96; property will automatically be initialized and attached to the scene.</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; This delegate does not imply the connecting scene or session are new (see &#96;application:configurationForConnectingSceneSession&#96; instead).   </span><br><span class="line"></span><br><span class="line">  UIViewController *vc &#x3D; [[UIViewController alloc] init];</span><br><span class="line"></span><br><span class="line">  UINavigationController *na &#x3D; [[UINavigationController alloc] initWithRootViewController:vc];</span><br><span class="line"></span><br><span class="line">  self.window.rootViewController &#x3D; na;</span><br><span class="line"></span><br><span class="line">  UIWindowScene *windowScene &#x3D; (UIWindowScene *)scene;</span><br><span class="line"></span><br><span class="line">  self.window &#x3D; [[UIWindow alloc] initWithWindowScene:windowScene];</span><br><span class="line"></span><br><span class="line">  self.window.frame &#x3D; windowScene.coordinateSpace.bounds;</span><br><span class="line"></span><br><span class="line">  self.window.backgroundColor &#x3D; [UIColor whiteColor];</span><br><span class="line"></span><br><span class="line">  [self.window makeKeyAndVisible];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先，必须明确的是 在将新场景添加到应用中后 会调用<code>scene(_：willConnectTo：options：)</code>代理函数。 它提供了一个<code>scene</code>对象（和一个session）。 这个“UIWindowScene”对象是由应用创建的，您无需进行其他操作。</li><li>其次，<code>window</code>属性会在这里用到。 App仍然使用“ UIWindow”对象，但现在它们已成为scene（场景）的一部分。 在<code>if let</code>代码块中，您可以清楚地看到如何使用<em>scene</em>来初始化UIWindow对象的。</li><li>然后是设置window的rootViewController，将<code>window</code>实例分配给了场景的<code>window</code>属性，并且设置窗口<code>makeKeyAndVisible</code>为true，即将该窗口置于App的前面。</li><li>接着为SwiftUI项目创建了ContentView实例，并通过使用UIHostingController将其添加为根视图控制器。 该控制器用于将基于SwiftUI的视图显示在屏幕上。</li><li>最后但并非不重要的一点，值得注意的是，UIScene的实例化对象scene实际上是UIWindowScene类型的对象。 这就是<code>as?</code>对可选类型转换的原因。 （到目前为止，已创建的场景通常为“ UIWindowScene”类型，但我猜想将来还会看到更多类型的场景。）</li></ul><p>所有这些看起来似乎很复杂，但是从高层次的概述来看，这很简单：</p><ul><li><p>当<code>scene（_：willConnectTo：options：）</code>被调用时，SceneDelegate会在正确的时间配置场景。</p></li><li><p>AppDelegate和Manifest的默认配置，他们没有涉及storyboard的任何东西。</p></li><li><p><code>scene（_：willConnectTo：options :)</code>函数内，创建一个SwiftUI视图，将其放置在托管控制器中，然后将控制器分配给window属性的根视图控制器，并将该窗口放置在应用程序UI的前面 。</p><p>使用SceneDelegate的核心是将一些代码从AppDelegate移至到SceneDelegate中，并正确配置 Application Scene Manifest 。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; iOS13以后不可以在Appdelegate里面创建根视图，只能在SceneDelegate中创建。&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>解决cocoapods更新的一些小问题</title>
    <link href="http://yoursite.com/2023/07/18/%E8%A7%A3%E5%86%B3cocoapods%E6%9B%B4%E6%96%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2023/07/18/%E8%A7%A3%E5%86%B3cocoapods%E6%9B%B4%E6%96%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/</id>
    <published>2023-07-18T06:11:11.000Z</published>
    <updated>2023-07-18T08:14:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> 长时间没用使用cocoapods会遇见一些小问题，主要解决源，证书等问题。</p> <a id="more"></a></blockquote><h2 id="一、证书问题"><a href="#一、证书问题" class="headerlink" title="一、证书问题"></a>一、证书问题</h2><p>最近升级cocoapods中发现在更新ruby镜像源的时候遇见ssl证书链接错误的情况,</p><p><code>https://gems.ruby-china.org/</code>已经访问不了,需要替换新的镜像。</p><p>步骤：</p><h3 id="1、首先将查看自己的镜像"><a href="#1、首先将查看自己的镜像" class="headerlink" title="1、首先将查看自己的镜像"></a>1、首先将查看自己的镜像</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`gem sources -l`</span><br></pre></td></tr></table></figure><h3 id="2、再将之前的镜像删除"><a href="#2、再将之前的镜像删除" class="headerlink" title="2、再将之前的镜像删除"></a>2、再将之前的镜像删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources --remove https:&#x2F;&#x2F;gems.ruby-china.org&#x2F;</span><br></pre></td></tr></table></figure><h3 id="3、添加新的源路径"><a href="#3、添加新的源路径" class="headerlink" title="3、添加新的源路径"></a>3、添加新的源路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources --add https:&#x2F;&#x2F;gems.ruby-china.com&#x2F;</span><br></pre></td></tr></table></figure><p><strong>这个时候开始报错ssl证书错误</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ERROR: SSL verification error at depth 1: unable to get local issuer certificate (20)</span><br><span class="line">ERROR: You must add &#x2F;O&#x3D;Digital Signature Trust Co.&#x2F;CN&#x3D;DST Root CA X3 to your local trusted store</span><br><span class="line">Error fetching https:&#x2F;&#x2F;gems.ruby-china.com&#x2F;:</span><br><span class="line">SSL_connect returned&#x3D;1 errno&#x3D;0 state&#x3D;error: certificate verify failed (https:&#x2F;&#x2F;gems.ruby-china.com&#x2F;specs.4.8.gz)</span><br></pre></td></tr></table></figure><h3 id="4、这时候需要检查自己的OpenSSL正式是否过期"><a href="#4、这时候需要检查自己的OpenSSL正式是否过期" class="headerlink" title="4、这时候需要检查自己的OpenSSL正式是否过期"></a>4、这时候需要检查自己的OpenSSL正式是否过期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm osx-ssl-certs</span><br></pre></td></tr></table></figure><p>效果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Certificates for ~&#x2F;Documents&#x2F;ssldir&#x2F;~&#x2F;Documents&#x2F;ssldir&#x2F;cert.pem: Old.</span><br></pre></td></tr></table></figure><h3 id="5、这时候更新OpenSSL证书"><a href="#5、这时候更新OpenSSL证书" class="headerlink" title="5、这时候更新OpenSSL证书"></a>5、这时候更新OpenSSL证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm osx-ssl-certs update all</span><br></pre></td></tr></table></figure><p>效果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Updating certificates for ~&#x2F;Documents&#x2F;ssldir&#x2F;~&#x2F;Documents&#x2F;ssldir&#x2F;cert.pem: Updating certificates in &#39;~&#x2F;Documents&#x2F;ssldir&#x2F;~&#x2F;Documents&#x2F;ssldir&#x2F;cert.pem&#39;.Updated.</span><br></pre></td></tr></table></figure><h3 id="6、添加新的镜像源"><a href="#6、添加新的镜像源" class="headerlink" title="6、添加新的镜像源"></a>6、添加新的镜像源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem sources --add https:&#x2F;&#x2F;gems.ruby-china.com&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;gems.ruby-china.com&#x2F; added to sources</span><br></pre></td></tr></table></figure><h3 id="7、再次检查"><a href="#7、再次检查" class="headerlink" title="7、再次检查"></a>7、再次检查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><p>效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;gems.ruby-china.com&#x2F;</span><br></pre></td></tr></table></figure><h2 id="二、可能会出现的问题"><a href="#二、可能会出现的问题" class="headerlink" title="二、可能会出现的问题"></a>二、可能会出现的问题</h2><h3 id="1、可能会出现"><a href="#1、可能会出现" class="headerlink" title="1、可能会出现"></a>1、可能会出现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[!] Unable to find a pod with name, author, summary, or description matching &#96;afnet&#96;</span><br></pre></td></tr></table></figure><p>pod setup成功后，依然不能pod search，是因为之前你执行pod search生成了search_index.json，此时需要删掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm ~&#x2F;Library&#x2F;Caches&#x2F;CocoaPods&#x2F;search_index.json</span><br></pre></td></tr></table></figure><h3 id="2、删除成功后，再执行"><a href="#2、删除成功后，再执行" class="headerlink" title="2、删除成功后，再执行"></a>2、删除成功后，再执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search afnetworking</span><br></pre></td></tr></table></figure><h3 id="3、输出"><a href="#3、输出" class="headerlink" title="3、输出"></a>3、输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating search index for spec repo &#39;master&#39;..</span><br></pre></td></tr></table></figure><h3 id="4、等待成功，成功之后输出"><a href="#4、等待成功，成功之后输出" class="headerlink" title="4、等待成功，成功之后输出"></a>4、等待成功，成功之后输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating search index for spec repo &#39;master&#39;.. Done!</span><br></pre></td></tr></table></figure><p>然后会自动进入你搜索的第三方库。</p><p>注意： 第三步可能会等待的时间比较长，请耐心等待。</p><h2 id="三、cocoapods使用步骤"><a href="#三、cocoapods使用步骤" class="headerlink" title="三、cocoapods使用步骤"></a>三、cocoapods使用步骤</h2><h3 id="1、需要在工程中创建一个Podfile文件"><a href="#1、需要在工程中创建一个Podfile文件" class="headerlink" title="1、需要在工程中创建一个Podfile文件"></a>1、需要在工程中创建一个Podfile文件</h3><p>在以上可以搜索出相关库文件后，使用命令行创建工程相关文件</p><p>使用命令：</p><h4 id="1-1-进入工程目录，cd以后是工程路径"><a href="#1-1-进入工程目录，cd以后是工程路径" class="headerlink" title="1.1 进入工程目录，cd以后是工程路径"></a>1.1 进入工程目录，cd以后是工程路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipixus-Pro:~ lipixu$ cd &#x2F;Users&#x2F;lipixu&#x2F;Desktop&#x2F;快点相关&#x2F;KoodPower</span><br></pre></td></tr></table></figure><h4 id="1-2-创建Podfile文件"><a href="#1-2-创建Podfile文件" class="headerlink" title="1.2 创建Podfile文件"></a>1.2 创建Podfile文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch Podfile</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/%E8%A7%A3%E5%86%B3cocoapods%E6%9B%B4%E6%96%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/cocoapods-1@2x.png" alt="cocoapods-1@2x"></p><h4 id="1-3-使用vim编辑Podfile文件，使用命令"><a href="#1-3-使用vim编辑Podfile文件，使用命令" class="headerlink" title="1.3 使用vim编辑Podfile文件，使用命令"></a>1.3 使用vim编辑Podfile文件，使用命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;$ vim Podfile&#96;</span><br></pre></td></tr></table></figure><p>进入如下界面</p><p><img src="/2023/07/18/%E8%A7%A3%E5%86%B3cocoapods%E6%9B%B4%E6%96%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/cocoapods-2@2x.png" alt="cocoapods-2@2x"></p><h4 id="1-4-编辑Podfile文件"><a href="#1-4-编辑Podfile文件" class="headerlink" title="1.4 编辑Podfile文件"></a>1.4 编辑Podfile文件</h4><p>然后紧接着按键盘上的“i”键，变成如下状态，这个时候可以对Podfile文件进行编辑：</p><p>$platform:ios, ‘7.0‘</p><p>$ pod ‘AFNetworking‘, ‘~&gt; 2.3.1‘</p><p>在编辑完成后按“esc”，这是退出编辑状态。</p><h4 id="1-5-退出并保存"><a href="#1-5-退出并保存" class="headerlink" title="1.5 退出并保存"></a>1.5 退出并保存</h4><p>在按“:”,这个时候输入wq,点击回车，保存并退出。</p><p><img src="/2023/07/18/%E8%A7%A3%E5%86%B3cocoapods%E6%9B%B4%E6%96%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/cocoapods-3@2x.png" alt="cocoapods-3@2x"></p><h3 id="2、安装第三方库"><a href="#2、安装第三方库" class="headerlink" title="2、安装第三方库"></a>2、安装第三方库</h3><p>然后在终端输入命令安装相应的第三方类库：</p><p>首次使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$pod install</span><br></pre></td></tr></table></figure><p>非首次使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$pod update</span><br></pre></td></tr></table></figure><h2 id="四、cocoapods安装中会遇见的一些小问题"><a href="#四、cocoapods安装中会遇见的一些小问题" class="headerlink" title="四、cocoapods安装中会遇见的一些小问题"></a>四、cocoapods安装中会遇见的一些小问题</h2><h3 id="1、正确的工程名"><a href="#1、正确的工程名" class="headerlink" title="1、正确的工程名"></a>1、正确的工程名</h3><h4 id="1-1-current-Xcode-Session"><a href="#1-1-current-Xcode-Session" class="headerlink" title="1.1 current Xcode Session"></a>1.1 current Xcode Session</h4><p><img src="/2023/07/18/%E8%A7%A3%E5%86%B3cocoapods%E6%9B%B4%E6%96%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/cocoapods-5@2x.png" alt="cocoapods-5@2x"></p><p>安装时出现如上图中警告时：</p><p>或者如下图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Could not automatically select an Xcode workspace. Specify one in your Podfile like so:</span><br><span class="line"></span><br><span class="line">    workspace &#39;path&#x2F;to&#x2F;Workspace.xcworkspace&#39;</span><br><span class="line">    xcodeproj &#39;path&#x2F;to&#x2F;Project.xcodeproj&#39;</span><br></pre></td></tr></table></figure><p>解决方法：<br>在终端通过 <code>cd</code> 命令切换路径到 <code>Podfile</code> 文件所在目录</p><p>编辑 <code>Podfile</code>：XXX为工程名，下面是自己引入的类库</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target <span class="string">'XXX'</span> <span class="keyword">do</span></span><br><span class="line">pod <span class="string">'AFNetworking'</span>, <span class="string">'~&gt; 3.0'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="1-2-错误的target"><a href="#1-2-错误的target" class="headerlink" title="1.2 错误的target"></a>1.2 错误的target</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target &#39;XXX&#39; do</span><br><span class="line">pod &#39;AFNetworking&#39;, &#39;~&gt; 3.0&#39;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这个target和end都必要。</p><h4 id="1-3-完整的Podfile示例"><a href="#1-3-完整的Podfile示例" class="headerlink" title="1.3 完整的Podfile示例"></a>1.3 完整的Podfile示例</h4><p><img src="/2023/07/18/%E8%A7%A3%E5%86%B3cocoapods%E6%9B%B4%E6%96%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/cocoapods-4@2x.png" alt="cocoapods-4@2x"></p><p>注意点：#表示是注释</p><p>很多Podfile文件给Platform: ios, ‘9.0’ 打上注释（不知道为何），这里注意不可（会报警告）</p><p>end必须有。</p><h4 id="1-4-更新到最新版本的cocoapods"><a href="#1-4-更新到最新版本的cocoapods" class="headerlink" title="1.4 更新到最新版本的cocoapods"></a>1.4 更新到最新版本的cocoapods</h4><p>报错提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The &#96;master&#96; repo requires CocoaPods 0.18.1 - </span><br><span class="line">Update Cocoapods, or checkout the appropriate tag in the repo.</span><br></pre></td></tr></table></figure><p>错误原因：没有更新到最新的Cocoapods版本</p><p>解决方法：更新 CocoaPods ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;$ [sudo] gem update cocoapods</span><br></pre></td></tr></table></figure><p>如果你想尝试一个预发布版本的CocoaPods可以运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;$ [sudo] gem update cocoapods --pre&#96;</span><br></pre></td></tr></table></figure><h4 id="1-5-没有正确的依赖目标"><a href="#1-5-没有正确的依赖目标" class="headerlink" title="1.5 没有正确的依赖目标"></a>1.5 没有正确的依赖目标</h4><p>报错提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The dependency &#96;AFNetworking (~&gt; 3.1.0)&#96; is not used in any concrete target.</span><br></pre></td></tr></table></figure><p>错误原因：第三方库找不到正确的安装目标</p><p>解决方法：</p><p>添加 <code>target名</code>，如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target <span class="string">'XXX'</span>  <span class="keyword">do</span></span><br><span class="line">pod <span class="string">'AFNetworking'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>其中XXX要换成当前 <code>target名</code>，最后不要忘记增加一个 <code>end</code> 结尾。</p><p>然后重新进行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><h4 id="1-6-错误使用了中文标点"><a href="#1-6-错误使用了中文标点" class="headerlink" title="1.6 错误使用了中文标点"></a>1.6 错误使用了中文标点</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your Podfile has had smart quotes sanitised. To avoid issues in the <span class="built_in">future</span>, you should <span class="keyword">not</span> use TextEdit <span class="keyword">for</span> editing it. If you are <span class="keyword">not</span> <span class="keyword">using</span> TextEdit, you should turn off smart quotes in your editor of choice.</span><br></pre></td></tr></table></figure><p>大意就是你得 <code>Podfile</code> 文件里面有部分引号不合法，不要使用文本编辑。</p><p>注意：<code>Podfile</code> 文件里面引号应该是 <strong><code>&#39;</code></strong>，而不是 <strong><code>‘</code></strong>。注意区分。</p><p>1、不要使用文本编辑去编辑<code>Podfile</code>文件，使用<code>Xcode</code>编辑，或者使用终端敲命令去编辑。</p><p>2、<code>Podfile</code> 的内容语法格式有问题。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 长时间没用使用cocoapods会遇见一些小问题，主要解决源，证书等问题。&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="cocoapods的使用" scheme="http://yoursite.com/categories/cocoapods%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Java语言概述</title>
    <link href="http://yoursite.com/2022/12/09/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2022/12/09/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</id>
    <published>2022-12-09T05:42:49.000Z</published>
    <updated>2022-12-09T09:22:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> Java基础知识入门</p> <a id="more"></a></blockquote><h1 id="软件开发介绍"><a href="#软件开发介绍" class="headerlink" title="软件开发介绍"></a>软件开发介绍</h1><p>软件开发：一系列按照特定顺序组织的计算机数据和指令的集合。有系统软件和应用软件之分。</p><p>人机交互方式：</p><p>· 图形化界面：（Graphical User Interface GUI）施乐-苹果-微软</p><p>·命令行方式：（Command Line Interface CLI）</p><p>常用的DOS命令：</p><p>·D：进入某个盘：直接盘符：D:即可</p><p>· dir   ：-列出当前目录下的文件以及文件夹。</p><p>· md ：（make directory） A:创建文件夹，创建路径。B:创建目录   </p><p>· cd  ：（）A：进入某个目录。B：进入指定目录</p><p>· cd.. ：（）A:返回该路径下的上一层目录  。B:退回到上一级目录</p><p>· cd/  ： （）A:返回该路径下的最上层目录。B:退回根目录</p><p>· echo name:Tom age =12 &gt;1.doc  ：A: 创建1.doc文件，内容为name:Tom age = 12。</p><p>· del <em>.txt :  A： * :表示未知的或者是所有的。删除所有的后缀名为txt的文件。B：删除所有的（</em>）文件</p><p>· rd : (remove directory)  ：A： 删除文件夹 删除路径的节点（保证该文件夹为空）。B：删除目录</p><p>exit：退出DOS命令。</p><h1 id="计算机编程语言介绍"><a href="#计算机编程语言介绍" class="headerlink" title="计算机编程语言介绍"></a>计算机编程语言介绍</h1><h2 id="语言升级"><a href="#语言升级" class="headerlink" title="语言升级"></a>语言升级</h2><p>第一代</p><p>·机器语言。二进制</p><p>第二代</p><p>·汇编语言。使用助记符表示一条机器指令。</p><p>第三代</p><p>·高级语言</p><p>C，pascal，Fortran面向过程的语言。</p><p>C++面向过程/面向对象</p><p>Java跨平台的纯面向对面的言语</p><h2 id="why-is-Java"><a href="#why-is-Java" class="headerlink" title="why is Java"></a>why is Java</h2><p>使用程度最高，均衡性最好</p><h1 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h1><p>·是SUN（Stanford University Network ）1995年推出的一门高级语言</p><p>·是一种面向Internet的编程语言。</p><p>后台开发：Java 、PHP、Python、Go、Node.js（这些都可以开发后台）</p><p>从技术角度来分</p><h2 id="Java技术平台体系"><a href="#Java技术平台体系" class="headerlink" title="Java技术平台体系"></a>Java技术平台体系</h2><h3 id="A-Java-SE（Java-standard-Edition）标准版"><a href="#A-Java-SE（Java-standard-Edition）标准版" class="headerlink" title="A:Java SE（Java standard Edition）标准版"></a>A:Java SE（Java standard Edition）标准版</h3><p>支持面向桌面级应用（如Windows下的应用）的Java平台，提供了完整的Java核心API，此版本以前称为J2SE。</p><h3 id="B-Java-EE（Java-Enterprise-Edition）企业版"><a href="#B-Java-EE（Java-Enterprise-Edition）企业版" class="headerlink" title="B:Java EE（Java Enterprise Edition）企业版"></a>B:Java EE（Java Enterprise Edition）企业版</h3><p>是为开发企业环境下的应用程序提供的一套解决方案。该技术体系中包含的技术如：Servlet，Jsp等，主要针对于Web应用开发，版本以前称为J2EE。</p><h3 id="C-Java-ME-（Java-Micro-Edition）小型版"><a href="#C-Java-ME-（Java-Micro-Edition）小型版" class="headerlink" title="C:Java ME （Java Micro Edition）小型版"></a>C:Java ME （Java Micro Edition）小型版</h3><p>支持Java程序运行在移动端（手机、PDA）上的平台，对Java API有所精简，并加入了针对移动端的支持，此版本以前称为J2ME。</p><h3 id="D-Java-Card"><a href="#D-Java-Card" class="headerlink" title="D:Java Card"></a>D:Java Card</h3><p>支持一些Java小程序（APPlets）运行在小内存设备（如智能卡）上的平台。</p><p>从Java的应用领域来分</p><p>· 企业级应用</p><p>·Android平台应用</p><p>·大数据平台开发</p><h1 id="运行机制及运行过程"><a href="#运行机制及运行过程" class="headerlink" title="运行机制及运行过程"></a>运行机制及运行过程</h1><h2 id="Java语言的特点"><a href="#Java语言的特点" class="headerlink" title="Java语言的特点"></a>Java语言的特点</h2><h3 id="特点一：面向对面"><a href="#特点一：面向对面" class="headerlink" title="特点一：面向对面"></a>特点一：面向对面</h3><p>两个基本概念：类，对象</p><p>三大特性：封装，继承，多态</p><h3 id="特点二：健壮性"><a href="#特点二：健壮性" class="headerlink" title="特点二：健壮性"></a>特点二：健壮性</h3><p>吸收了C/C++语言的优点，但去掉了其影响程序健壮性的部分（如指针，内存的申请与释放），提供了一个相对安全的内存管理和访问机制。</p><h3 id="特点三：跨平台性"><a href="#特点三：跨平台性" class="headerlink" title="特点三：跨平台性"></a>特点三：跨平台性</h3><p>跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行。“write once，Run Anywhere”</p><p>原理：只要在需要运行Java应用程序的操作系统上，先安装一个Java虚拟机（JVM Java Virtual Machine）即可。由JVM来负责Java程序在该系统中的运行。</p><h3 id="核心机制"><a href="#核心机制" class="headerlink" title="核心机制"></a>核心机制</h3><h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><p>·不再使用的内存空间应回收–垃圾回收。</p><p>·垃圾回收在Java程序运行中自动进行，程序员无法精确控制和干扰。</p><p>注：Java程序依然会出现内存泄露和内存溢出的问题。</p><h4 id="Java虚拟机（JVM，Java-Virtual-Machine）"><a href="#Java虚拟机（JVM，Java-Virtual-Machine）" class="headerlink" title="Java虚拟机（JVM，Java Virtual Machine）"></a>Java虚拟机（JVM，Java Virtual Machine）</h4><p>不同操作系统中的JVM是不一样的（如Windows，mac OS，Linux等）</p><h1 id="Java的环境搭建"><a href="#Java的环境搭建" class="headerlink" title="Java的环境搭建"></a>Java的环境搭建</h1><h2 id="什么是JDK，JRE"><a href="#什么是JDK，JRE" class="headerlink" title="什么是JDK，JRE"></a>什么是JDK，JRE</h2><p>JDK：(Java Development Kit)  Java开发工具包</p><p>JDK是提供给Java开发人员使用的，其中包含了Java开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了</p><p>其中的开发工具：编译工具（Java.exe）打包工具（Jar.exe）等</p><p>JRE：（Java Runtime Environmenr) Java运行环境</p><p>包括Java虚拟机（JVM）和Java程序所需的核心内库等。如果想运行一个开发好的Java程序，计算机中只需要安装JRE即可。</p><p>总结：简单而言，使用JDK的开发工具完成的Java程序，交给JRE去运行。</p><h1 id="开发体验-HelloWorld"><a href="#开发体验-HelloWorld" class="headerlink" title="开发体验-HelloWorld"></a>开发体验-HelloWorld</h1><h1 id="常见问题及解决办法"><a href="#常见问题及解决办法" class="headerlink" title="常见问题及解决办法"></a>常见问题及解决办法</h1><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><h1 id="Java-API文档"><a href="#Java-API文档" class="headerlink" title="Java API文档"></a>Java API文档</h1><h1 id="良好的编程习惯"><a href="#良好的编程习惯" class="headerlink" title="良好的编程习惯"></a>良好的编程习惯</h1><h1 id="常用的Java开发工具"><a href="#常用的Java开发工具" class="headerlink" title="常用的Java开发工具"></a>常用的Java开发工具</h1>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; Java基础知识入门&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Java入门" scheme="http://yoursite.com/categories/Java%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>java基础目录概述</title>
    <link href="http://yoursite.com/2022/12/09/java%E5%9F%BA%E7%A1%80%E7%9B%AE%E5%BD%95%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2022/12/09/java%E5%9F%BA%E7%A1%80%E7%9B%AE%E5%BD%95%E6%A6%82%E8%BF%B0/</id>
    <published>2022-12-09T02:17:53.000Z</published>
    <updated>2022-12-09T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> java入门基础知识</p> <a id="more"></a></blockquote><p>#JavaEE学习路径（大纲）</p><h2 id="第一阶段：JavaSE"><a href="#第一阶段：JavaSE" class="headerlink" title="第一阶段：JavaSE"></a>第一阶段：JavaSE</h2><p>Java基础</p><p>java新特性</p><p>数据库MySQL与SQL语言</p><p>JDBC</p><h2 id="第二阶段：JavaWeb"><a href="#第二阶段：JavaWeb" class="headerlink" title="第二阶段：JavaWeb"></a>第二阶段：JavaWeb</h2><p>HTML基础与CSS</p><p>JavaScript DOM与jQuery</p><p>XML与Tomcat</p><p>HTTP协议</p><p>服务器端组件Servlet</p><p>JSP</p><p>EL表达式</p><p>会话控制Cookie和Session</p><p>服务器端组件Filter</p><p>服务器端组件Listener</p><p>国际化</p><p>异步数据传输框架Ajax</p><p>文件的上传下载</p><h2 id="第三阶段：JavaEE框架"><a href="#第三阶段：JavaEE框架" class="headerlink" title="第三阶段：JavaEE框架"></a>第三阶段：JavaEE框架</h2><p>系统整体分层解耦框架spring</p><p>轻量级Web框架springMVC</p><p>轻量级持久框架mybatis</p><p>服务器操作系统Linus</p><p>内存数据库Redis</p><p>项目架构、jar包管理工具Maven</p><h2 id="第四阶段：JavaEE高级"><a href="#第四阶段：JavaEE高级" class="headerlink" title="第四阶段：JavaEE高级"></a>第四阶段：JavaEE高级</h2><p>svn/IDEA开发工具</p><p>分布式版本管理工具Git与GitHub</p><p>Mysql高级</p><p>Mycat实现MySQL的分布式，分库分表，读写分离</p><p>Nginx反向代理，负载均衡，动静分离</p><p>JVM内存模型，参数调优</p><p>JUC线程高级</p><p>分布式架构注册中心Zookeeper</p><p>虚拟化应用容器Docker</p><p>全文检索引擎ElasticSearch</p><p>消息队列RabbitMQ</p><p>前端VUE/ES6</p><h1 id="Java应用场景"><a href="#Java应用场景" class="headerlink" title="Java应用场景"></a>Java应用场景</h1><p>Java基础是学习JavaEE，大数据，Android开发的基石。</p><p>JavaEE：spring—Rest（spring MVC）</p><p>大数据：Spark-Spark Streaming</p><p>Android：商城页面</p><p>都需要使用Java语言。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; java入门基础知识&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Java入门" scheme="http://yoursite.com/categories/Java%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>每日零碎汇总</title>
    <link href="http://yoursite.com/2022/12/07/%E6%AF%8F%E6%97%A5%E9%9B%B6%E7%A2%8E%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2022/12/07/%E6%AF%8F%E6%97%A5%E9%9B%B6%E7%A2%8E%E6%B1%87%E6%80%BB/</id>
    <published>2022-12-07T09:15:25.000Z</published>
    <updated>2022-12-07T09:20:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> 主要记载在过程没时间弄清楚但是自己觉得很重要的相关内容。</p> <a id="more"></a></blockquote><h1 id="2022年12月07日"><a href="#2022年12月07日" class="headerlink" title="2022年12月07日"></a>2022年12月07日</h1><p>1、git在有多个（两个）github账号（环境）中如何避免命令混乱的问题。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 主要记载在过程没时间弄清楚但是自己觉得很重要的相关内容。&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="每天遗漏" scheme="http://yoursite.com/categories/%E6%AF%8F%E5%A4%A9%E9%81%97%E6%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Github设置相关问题</title>
    <link href="http://yoursite.com/2022/12/07/Github%E8%AE%BE%E7%BD%AE%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2022/12/07/Github%E8%AE%BE%E7%BD%AE%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</id>
    <published>2022-12-07T08:48:23.000Z</published>
    <updated>2022-12-07T09:06:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> 主要是创建SSH公钥以后设置github的问题两种方式SSH与Https两种方式，还有如何避免每一次都需要输出公钥密码这个问题。</p> <a id="more"></a></blockquote><p>#一、生成SSH公钥</p><h3 id="1、在git中用命令行创建公钥"><a href="#1、在git中用命令行创建公钥" class="headerlink" title="1、在git中用命令行创建公钥"></a>1、在git中用命令行创建公钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#39;your email address&#39;</span><br></pre></td></tr></table></figure><ol><li>文件名称及位置选择默认，enter即可。</li><li>passphrase一定要写，其实可以跳过，但是有密码更安全不是，但就是这个密码，又给自己埋下了坑。</li></ol><p>（如何copy公钥在零碎汇总中这篇文章中有写，这里不多说了）</p><h3 id="2、拷贝上面的-ssh-id-rsa-pub到GitHub上"><a href="#2、拷贝上面的-ssh-id-rsa-pub到GitHub上" class="headerlink" title="2、拷贝上面的/.ssh/id_rsa.pub到GitHub上"></a>2、拷贝上面的/.ssh/id_rsa.pub到GitHub上</h3><p>这个直接在profile中直接复制就行。</p><h1 id="二、设置remote-Github（有坑注意）"><a href="#二、设置remote-Github（有坑注意）" class="headerlink" title="二、设置remote Github（有坑注意）"></a>二、设置remote Github（有坑注意）</h1><p>需要在git上面设置remote地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SSH :</span><br><span class="line">git remote add orgin ssh:&#x2F;&#x2F;github.com:your github account&#x2F;your repository</span><br><span class="line"></span><br><span class="line">HTTPS:  </span><br><span class="line">git remote add orgin https:&#x2F;&#x2F;github.com&#x2F;your github account&#x2F;your repository</span><br></pre></td></tr></table></figure><h3 id="1、坑一"><a href="#1、坑一" class="headerlink" title="1、坑一"></a>1、坑一</h3><p>区分了添加https和ssh两种方式，区别就在于：</p><p>· ssh:不需要每次提交的时候都输入username和passphrase </p><p>· https:每次都需要输入一遍username和passphrase。</p><p>而我一开始手滑选择了https，导致每次提交都要重新输入密码和用户名，所以后来就切换到了ssh模式下。具体怎么切网上有很多教程，不再赘述。</p><p>然后，push想要push的东西即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br><span class="line"># -u 只有首次提交的时候需要，后续再次push可以省略</span><br></pre></td></tr></table></figure><h3 id="2、坑二"><a href="#2、坑二" class="headerlink" title="2、坑二"></a>2、坑二</h3><p>仍然每次都需要填写密码</p><p>每次提交代码或者上传blog都需要填写密码</p><p>Enter passphrase for key ‘/Users/MYNAME/.ssh/id_rsa’</p><p>说好的ssh不需要密码呢？？ 翻了一些教程，有的说干脆重新设置为无密码，这样就不需要每次都输入了，个人觉得这是个办法，不是最优解。下面把我最后的解法贴下来，这个方法的原理就是托管一个代理替你保存密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 1、先打开代理，如果你已经打开，那么直接运行命令2即可：</span><br><span class="line">eval $(ssh-agent)</span><br><span class="line"></span><br><span class="line">#2、输入下面命令，然后再次输入密码即可，大功告成</span><br><span class="line">ssh-add ~&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 主要是创建SSH公钥以后设置github的问题两种方式SSH与Https两种方式，还有如何避免每一次都需要输出公钥密码这个问题。&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="git相关操作" scheme="http://yoursite.com/categories/git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>”git使用-代码回滚“</title>
    <link href="http://yoursite.com/2022/12/07/%E2%80%9Dgit%E4%BD%BF%E7%94%A8-%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A%E2%80%9C/"/>
    <id>http://yoursite.com/2022/12/07/%E2%80%9Dgit%E4%BD%BF%E7%94%A8-%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A%E2%80%9C/</id>
    <published>2022-12-07T08:23:13.000Z</published>
    <updated>2022-12-07T08:36:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> git使用中的一些常见操作，习惯性记录，方便以后寻找。</p> <a id="more"></a></blockquote><h2 id="git-代码回滚"><a href="#git-代码回滚" class="headerlink" title="git 代码回滚"></a>git 代码回滚</h2><p>如果我们提交了（git commit）代码，并且已经推送（git push）到了远程分支，突然发现版本不对，我们想要撤回来，该怎么做？</p><p>三种方式：</p><p>a. git revert commit号；通过git revert来进行覆盖，也就是找到需要撤回的版本对应的版本号，通过git revert 加上提交的ID来进行线上覆盖。</p><p>b. git reset –soft commit号 ；通过git reset –soft进行重置，这个方式也是我个人比较喜欢的方式，当你提交了4个文件到master以后，想要撤回来，这种方式会把提交的代码全部保留再本地，同时你执行git status，你会发现这些代码都变成了等待提交的状态，当你修改完以后，在通过git push origin master –force，切记一定要通过–force来强推，因为git reset 不会撤回线上的代码，只是撤回你本地仓库的代码，那么你要提交就会冲突，必须强推才能提交上去。</p><p>c. git reset –hard commit号；这种方式慎用，这种方式和–soft类似，但是唯一的区别就是执行以后，本地仓库代码都会自动删除，当你不想要这次提交的代码的时候可以采用这种方式，最后也是通过git push origin master –force来强推。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; git使用中的一些常见操作，习惯性记录，方便以后寻找。&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="git相关操作" scheme="http://yoursite.com/categories/git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>一年后重新使用hexo遇见的问题的解决办法</title>
    <link href="http://yoursite.com/2022/12/07/%E4%B8%80%E5%B9%B4%E5%90%8E%E9%87%8D%E6%96%B0%E4%BD%BF%E7%94%A8hexo%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2022/12/07/%E4%B8%80%E5%B9%B4%E5%90%8E%E9%87%8D%E6%96%B0%E4%BD%BF%E7%94%A8hexo%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2022-12-07T06:35:58.000Z</published>
    <updated>2022-12-07T08:45:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> 自从一年前搭建hexo到现在，只有刚开始使用hexo的时候零碎的上传过几篇文章，一年后又要重新写技术blog后发现各种零碎的小问题汇总</p> <a id="more"></a></blockquote><h3 id="创建blog的步骤"><a href="#创建blog的步骤" class="headerlink" title="创建blog的步骤"></a>创建blog的步骤</h3><p>这个在一开始的时候就已经预料到长时间不使用hexo上传blog时会遗忘相关步骤，所以写了一篇简单的上传步骤解析（查看之前的文章）。这里不做详细说明了。主要记载重新上传的时候所遇见的坑</p><h2 id="一、注意hexo-d发布的时候输入用户密码报错"><a href="#一、注意hexo-d发布的时候输入用户密码报错" class="headerlink" title="一、注意hexo d发布的时候输入用户密码报错"></a><strong>一、注意hexo d发布的时候输入用户密码报错</strong></h2><p>报错如下</p><p>Username for ‘<a href="https://github.com&#39;" target="_blank" rel="noopener">https://github.com&#39;</a>: <a href="mailto:365278654@qq.com">365278654@qq.com</a>    </p><p>Password for ‘<a href="https://365278654@qq.com@github.com&#39;" target="_blank" rel="noopener">https://365278654@qq.com@github.com&#39;</a>: </p><p>remote: Support for password authentication was removed on August 13, 2021.</p><p>fatal: unable to access ‘<a href="https://github.com/liping-xu/liping-xu.github.io.git/&#39;" target="_blank" rel="noopener">https://github.com/liping-xu/liping-xu.github.io.git/&#39;</a>: The requested URL returned error: 403</p><p>这是因为github为什么要把密码换成token，把密码换成token就可以了。</p><h3 id="1、创建个人token的步骤"><a href="#1、创建个人token的步骤" class="headerlink" title="1、创建个人token的步骤"></a>1、创建个人token的步骤</h3><p>1.在GitHub创建自己的Personal access tokens；点击右上角头像选择Settings；</p><p><img src="/2022/12/07/%E4%B8%80%E5%B9%B4%E5%90%8E%E9%87%8D%E6%96%B0%E4%BD%BF%E7%94%A8hexo%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/hexo-blog-1.png" alt="hexo-blog-1"></p><p>2.选择Settings -&gt; 左侧栏Developer Settings -&gt; Personal access tokens，然后点击Generate new token创建你的一个你的个人token；</p><p><img src="/2022/12/07/%E4%B8%80%E5%B9%B4%E5%90%8E%E9%87%8D%E6%96%B0%E4%BD%BF%E7%94%A8hexo%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/hexo-blog-2.png" alt="hexo-blog-2"></p><p>3.然后填写你的相关信息；</p><p>Note填写你的token名字，用于区分其他你创建的token；</p><p>Expiration则是选择你的token的过期时间；</p><p>Select scopes选择你的token的权限，每个权限后面都有对应的功能解释；</p><p>我这里选择了admin:repo_hook, delete_repo, repo；</p><p>然后点击最下面的按钮生成你的personal access token；</p><p><img src="/2022/12/07/%E4%B8%80%E5%B9%B4%E5%90%8E%E9%87%8D%E6%96%B0%E4%BD%BF%E7%94%A8hexo%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/hexo-blog-3.png" alt="hexo-blog-3"></p><p>5.Generate token点击后会生成你的token，需要进行复制并保存，后续不可见，否则需要重新生成token；</p><p>（注意这里token这辈子只能看一次，所以需要复制好位置）</p><p><img src="/2022/12/07/%E4%B8%80%E5%B9%B4%E5%90%8E%E9%87%8D%E6%96%B0%E4%BD%BF%E7%94%A8hexo%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/hexo-blog-4.png" alt="hexo-blog-4"></p><h3 id="2、更改hexo配置文件中的git镜像映射地址"><a href="#2、更改hexo配置文件中的git镜像映射地址" class="headerlink" title="2、更改hexo配置文件中的git镜像映射地址"></a>2、更改hexo配置文件中的git镜像映射地址</h3><p>这是解决如下错误：</p><p>fatal: unable to access ‘<a href="https://github.com/liping-xu/liping-xu.github.io.git/&#39;" target="_blank" rel="noopener">https://github.com/liping-xu/liping-xu.github.io.git/&#39;</a>: The requested URL returned error: 403</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config.yml   #将https的地址更改为git开头的地址</span><br></pre></td></tr></table></figure><p><img src="/2022/12/07/%E4%B8%80%E5%B9%B4%E5%90%8E%E9%87%8D%E6%96%B0%E4%BD%BF%E7%94%A8hexo%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/hexo-blog-5.png" alt="hexo-blog-5"></p><h2 id="二-重新配置本地公钥以及更新github上的公钥"><a href="#二-重新配置本地公钥以及更新github上的公钥" class="headerlink" title="二 重新配置本地公钥以及更新github上的公钥"></a>二 重新配置本地公钥以及更新github上的公钥</h2><p>报错如下：</p><p>Warning: Permanently added ‘github.com,20.205.243.166’ (ECDSA) to the list of known hosts.</p><p><a href="mailto:git@github.com">git@github.com</a>: Permission denied (publickey).</p><p>fatal: Could not read from remote repository.</p><p>mac未绑定Gitlab或者Github账号，需要重新生成公钥</p><h3 id="1、SSH是什么？"><a href="#1、SSH是什么？" class="headerlink" title="1、SSH是什么？"></a>1、SSH是什么？</h3><p>SSH（Secure Shell）是一种安全协议。在你的电脑与Gitlab服务器进行通信时，我们使用SSH密钥（SSH key）认证的方式来保证通信安全。</p><h3 id="2、创建SSH密钥"><a href="#2、创建SSH密钥" class="headerlink" title="2、创建SSH密钥"></a>2、创建SSH密钥</h3><p>创建SSH密钥，并将密钥中的公钥添加到Gitlab，以便我们通过SSH协议来访问Git仓库。</p><p>SSH密钥的创建需要在终端（命令行）环境下进行，我们首先进入命令行环境。</p><p>· 在OS X和Linux平台下我们使用终端工具（Terminal）。</p><p>· 在Windows平台下，可以使用Git Bash工具，git客户端安装目录下git-bash.exe文件</p><p>####A、进入SSH目录</p><p>在终端中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;.ssh</span><br></pre></td></tr></table></figure><p>(1)、如果还没有~/.ssh目录，可以先手工创建一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~&#x2F;.ssh</span><br></pre></td></tr></table></figure><p>之后再通过cd ~/.ssh进入SSH目录</p><p>（2）可以通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-l</span><br></pre></td></tr></table></figure><p>命令查看SSH目录下面的文件，来确认你是否已经生成SSH密钥，如果SSH目录为空，我们开始第二步B，生成SSH密钥；如果存在id_rsa.pub这个文件，说明你之前生成过SSH密钥，如何添加多个SSHkey也不难，这里不介绍了。</p><h4 id="B、生成SSH密钥"><a href="#B、生成SSH密钥" class="headerlink" title="B、生成SSH密钥"></a>B、生成SSH密钥</h4><p>我们通过下面的命令生成密钥，将命令中的YOUR_EMAIL.COM替换为你注册Gitlab时用的Email地址（这里很容易想到如果有多个github账号怎么办，这个在另外一篇blog里面会有概述）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;YOUR_EMAIL@YOUREMAIL.COM&quot;</span><br></pre></td></tr></table></figure><p>在SSH生成过程中会出现以下信息，按屏幕的提示操作即可：</p><p>　　</p><p>Note：Enter passphrase (empty for no passphrase) :时，可以直接按两次回车键输入一个空的 passphrase；也可以选择输入一个 passphrase 口令，如果此时你输入了一个passphrase，请牢记，之后每次提交时都需要输入这个口令来确认。</p><p>实践过程中建议不要密码。</p><h3 id="3、获取SSH公钥信息"><a href="#3、获取SSH公钥信息" class="headerlink" title="3、获取SSH公钥信息"></a>3、获取SSH公钥信息</h3><p>SSH密钥生成结束后，根据提示信息找到SSH目录，会看到私钥id_rsa和公钥id_rsa.pub这两个文件，不要把私钥文件id_rsa的信息透露给任何人。我们可以通过cat命令或文本编辑器来查看id_rsa.pub公钥信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;.ssh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制id_rsa.pub文件里的内容复制到剪切板中。</p><h3 id="4、添加SSH公钥到Gitlab"><a href="#4、添加SSH公钥到Gitlab" class="headerlink" title="4、添加SSH公钥到Gitlab"></a>4、添加SSH公钥到Gitlab</h3><p>1.打开gitlab的Profile配置页面，选择SSH Keys.</p><p>2.添加SSH公钥。填写Title和Key，其中Title是Key的描述信息，Key是上面复制的SSH公钥的内容，直接粘贴到输入框中保存即可。</p><h3 id="5、导入项目"><a href="#5、导入项目" class="headerlink" title="5、导入项目"></a>5、导入项目</h3><h4 id="1-设置下git的用户名和邮箱"><a href="#1-设置下git的用户名和邮箱" class="headerlink" title="1.设置下git的用户名和邮箱"></a>1.设置下git的用户名和邮箱</h4><p>在提交代码前，还需要设置下git的用户名和邮箱（最好用英文，不要出现中文），这样提交记录才会在gitlab上显示带有你名字的记录。</p><p>在命令行窗口输入（windows需要安装打开<a href="http://download.csdn.net/detail/sun_2134/9279961" target="_blank" rel="noopener">Git Bash</a>工具才行）：</p><p>git config –global user.name “your_name”<br>git config –global user.email “your_email”</p><h4 id="2-导新项目到gitlab上"><a href="#2-导新项目到gitlab上" class="headerlink" title="2.导新项目到gitlab上"></a>2.导新项目到gitlab上</h4><p>如果项目存在，需要导入到gitlab，可以通过命令行直接将项目导入上去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;本地存在项目的路径&quot;  </span><br><span class="line">git init  </span><br><span class="line">git remote add origin git@gitlab.com:USERNAME&#x2F;PROJECTNAME.git  </span><br><span class="line">git add .  </span><br><span class="line">git commit -m &#39;first git demo&#39;  </span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 自从一年前搭建hexo到现在，只有刚开始使用hexo的时候零碎的上传过几篇文章，一年后又要重新写技术blog后发现各种零碎的小问题汇总&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="hexo使用中的零碎问题汇总" scheme="http://yoursite.com/categories/hexo%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E9%9B%B6%E7%A2%8E%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>markDown介绍与基本语法</title>
    <link href="http://yoursite.com/2022/12/06/markDown%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2022/12/06/markDown%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2022-12-06T05:48:47.000Z</published>
    <updated>2022-12-06T06:38:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> 为了防止长时间不使用markdown然后遗忘常见用法所做的一篇记录</p> <a id="more"></a></blockquote><h1 id="为什么会有markdown？"><a href="#为什么会有markdown？" class="headerlink" title="为什么会有markdown？"></a>为什么会有markdown？</h1><p>要理解 Markdown 的流行，有必要先了解「标记语言」的概念。</p><p>维基百科对标记语言的定义是「将文本（Text）以及文本相关的其他信息结合起来，展现出关于文档结构和数据处理细节的计算机文字编码」。简单来说，就是用一系列约定俗成的标记，规定文本的格式、结构等，如加粗、分段、字体颜色等，我们熟悉的 HTML 就是一种标记语言。</p><p><img src="/2022/12/06/markDown%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/markdown-image-1@2x.png" alt="markdown-image-1@2x"></p><p>▲同样的文字格式用 HTML 表达出来显然不如 Markdown 直观，</p><p>但像 HTML、RTF 等标记言语因为支持丰富的格式，语法非常复杂，可读性也很差，且不同的语言之间还有格式壁垒，难以打通。</p><p>而早期一些显示器无法显示加粗、斜体等文本格式，于是人们想出了用文本标记格式的方法，也就是轻量级标记语言，特点与前面提到的 HTML 等相反，纯文本记录，不受编辑器限制，简单易懂，维基百科就有自己一套标记语言，Markdown 则发展成了轻量标记语言中最有名的一种。</p><h1 id="markDown怎么使用？"><a href="#markDown怎么使用？" class="headerlink" title="markDown怎么使用？"></a>markDown怎么使用？</h1><p>不要被「语言」、「标记」等字样吓住，Markdown 不是 PHP 或 Python，它的语法十分简单，也不涉及任何数学或编程知识，几乎可以称得上零门槛。</p><p>前面一直提到，Markdown 一大优点是「易用易读」，几分钟即可掌握其语法，以下是几个常用的代码：</p><p>文字前加 # 号设置标题，一级标题对应 1 个 # 号，二级对应 2 个，依此类推，共可设置 6 级标题；<strong>文字</strong> 表示加粗；<em>文字</em> 表示斜体；文字前加 &gt; 表示引用；空白行输入 * * * 生成分割线；文字前加 *（或 +、-）生成无序列表，数字加英文句号生成有序列表；插入超链接：<a href="链接地址">显示文本</a>插入图片：<img src="/2022/12/06/markDown%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80" alt>效果如下：</p><p><img src="/2022/12/06/markDown%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/markDown-Image-2@2x.png" alt="markDown-Image-2@2x"></p><p>此外，Markdown 也支持制表、引用代码等，但既然是轻量级的标记语言，注定 Markdown 无法满足复杂的排版需求，如居中、左/右对齐、设置字体或颜色等，就不在其能力范围内了，毕竟专注于写作才是它的目的所在。好在由于 Markdown 本身支持转换为 HTML，所以熟悉 HTML 的用户也可以在 Markdown 的编辑器中使用 HTML 语法实现更丰富的页面效果。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>排版大概是我们日常与工作或学习打交道时都免不了的过程，追求效率的你可能厌倦了在键盘和鼠标之间频繁切换，所以，人生苦短，你需要 Markdown。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 为了防止长时间不使用markdown然后遗忘常见用法所做的一篇记录&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="markDown基本用法" scheme="http://yoursite.com/categories/markDown%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>@git之清除本地存在而远程仓库已删除的分支</title>
    <link href="http://yoursite.com/2021/02/04/git%E4%B9%8B%E6%B8%85%E9%99%A4%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%9C%A8%E8%80%8C%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%B7%B2%E5%88%A0%E9%99%A4%E7%9A%84%E5%88%86%E6%94%AF/"/>
    <id>http://yoursite.com/2021/02/04/git%E4%B9%8B%E6%B8%85%E9%99%A4%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%9C%A8%E8%80%8C%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%B7%B2%E5%88%A0%E9%99%A4%E7%9A%84%E5%88%86%E6%94%AF/</id>
    <published>2021-02-04T06:46:44.000Z</published>
    <updated>2021-02-04T07:11:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> Gitlab服务器上已经合并了分支并且删除了，但是在我本地的sourcetree中的远端分支还存在着，长期会造成大量的分支挂在soureTree上面让人极度不舒服！</p> <a id="more"></a></blockquote><h1 id="1、使用命令行执行命令"><a href="#1、使用命令行执行命令" class="headerlink" title="1、使用命令行执行命令"></a>1、使用命令行执行命令</h1><p>1、cd 进入git拉取的本地文件当中。</p><p>2、命令行输入：git remote prune origin；这样本地的远程分支就同步gitlab服务器的了。</p><p><img src="/2021/02/04/git%E4%B9%8B%E6%B8%85%E9%99%A4%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%9C%A8%E8%80%8C%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%B7%B2%E5%88%A0%E9%99%A4%E7%9A%84%E5%88%86%E6%94%AF/1.png" alt="1"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; Gitlab服务器上已经合并了分支并且删除了，但是在我本地的sourcetree中的远端分支还存在着，长期会造成大量的分支挂在soureTree上面让人极度不舒服！&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="git相关操作" scheme="http://yoursite.com/categories/git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>发布博客流程说明</title>
    <link href="http://yoursite.com/2020/09/25/%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2020/09/25/%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B%E8%AF%B4%E6%98%8E/</id>
    <published>2020-09-25T07:16:09.000Z</published>
    <updated>2022-12-07T08:32:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> 这篇文章主要是说明在个人博客上发布文章的具体流程，因为穷，无法购买服务器等设备，只能手动发布了，在此记录下发布流程。以免长期不上传文章导致遗忘相关步骤。</p> <a id="more"></a></blockquote><h1 id="一-开启-hexo-server"><a href="#一-开启-hexo-server" class="headerlink" title="一 开启 hexo server"></a>一 开启 hexo server</h1><p>###（1）进入文件夹</p><p>首先，进入本机已经搭建好的hexo文件夹,打开命令行界面：</p><p><a href>cd /Users/lipixu/Desktop/个人博客</a> </p><p>这个是本人电脑上安装hexo相关的文件夹路径。</p><p>###（2）创建blog相关文件</p><p><a href>hexo new “文章名”</a> </p><p>这里需要注意：（小问题花大时间去解决的一个坑）</p><p>在编辑markdown文件的时候，我们事先编辑的markdown文件有文件头，我们需要去填充文字说</p><p>这里每个title（例如tags: 、categories:等小标题后面的冒号跟要填充的内容都需要隔一个空格，不然就报错）。</p><p>然后你会在你的blog/souce/_post下回有你的新建的文件</p><h3 id="（3）blog预览"><a href="#（3）blog预览" class="headerlink" title="（3）blog预览"></a>（3）blog预览</h3><p><a href>hexo server</a>（简写: hexo s）</p><p>可以在本地的localhost:4000上预览一下自己的文章</p><p>###（4）blog预提交</p><p><a href>hexo generate</a> （简写: hexo g) </p><p>生成网站静态文件到默认设置的public文件夹</p><h3 id="（5）blog上传"><a href="#（5）blog上传" class="headerlink" title="（5）blog上传"></a>（5）blog上传</h3><p><a href>hexo deploy</a> (简写:hexo d)</p><p>自动生成网站静态文件，并部署到设定的仓库。</p><p>这时候文章上传完成。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 这篇文章主要是说明在个人博客上发布文章的具体流程，因为穷，无法购买服务器等设备，只能手动发布了，在此记录下发布流程。以免长期不上传文章导致遗忘相关步骤。&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="发布文章操作说明" scheme="http://yoursite.com/categories/%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS组件化学习-02</title>
    <link href="http://yoursite.com/2020/01/02/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0-02/"/>
    <id>http://yoursite.com/2020/01/02/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0-02/</id>
    <published>2020-01-02T07:19:05.000Z</published>
    <updated>2025-09-19T02:45:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> 本章主要内容是了解SDK，静态库.a文件和.framework文件的各种概念。因为根据需求制作以上的文件的目的是解耦，给别人用又不想别人看见我们的源码。做SDK都是做静态库也就是.a和.framework文件。为了准确区分各种概念问题，对所有的概念问题做一个汇总。</p> <a id="more"></a></blockquote><h1 id="几个IT行业常用术语"><a href="#几个IT行业常用术语" class="headerlink" title="几个IT行业常用术语"></a>几个IT行业常用术语</h1><h2 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h2><p>software Deveopment Kit：软件开发工具包</p><p>一般都是一些软件工程师为特定的软件包、软件框架，硬件平台、操作系统等建立应用软件时的开发工具的集合。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>Application Programming Interface：应用编程接口。</p><p>其实就是操作系统留给应用程序的一个调用接口，应用程序通过调用操作系统的API从而使操作系统去执行应用程序的命令。</p><h2 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h2><p>Dynamic Link Library，动态链接库。</p><p>在Windows环境下有大量的.dll格式的文件，这些文件就是动态链接库文件，其实也是一种可执行文件格式。跟.exe不同的是，.dll文件不能直接执行，他们通常由.exe在执行时装入，内容是一些资源以及可执行代码等。</p><h1 id="o文件和-a文件和-so文件的区别"><a href="#o文件和-a文件和-so文件的区别" class="headerlink" title=".o文件和.a文件和.so文件的区别"></a>.o文件和.a文件和.so文件的区别</h1><h2 id="o文件"><a href="#o文件" class="headerlink" title=".o文件"></a>.o文件</h2><p>.o文件就是对象文件，包含编译好的可执行代码，当程序执行时，被链接库链接条用（相当于windows里面的obj文件）。</p><h2 id="a文件"><a href="#a文件" class="headerlink" title=".a文件"></a>.a文件</h2><p>unix中的静态链接库，包含多个需要包含的.o文件，主要特点是在连接阶段即把库代码包含入可执行文件的方式（相当于windows操作系统的后缀名为.lib的静态库）。</p><h2 id="so文件"><a href="#so文件" class="headerlink" title=".so文件"></a>.so文件</h2><p>unix中的动态链接库，主要特点是，在运行阶段，动态加载组件时，在将函数加载到程序中，耦合度低（相当于window里面的dll组件）。</p><h1 id="什么是库"><a href="#什么是库" class="headerlink" title="什么是库"></a>什么是库</h1><p>库从本质上来说是一种可执行的二进制格式，可以被载入内存中执行。</p><p>库就是程序代码的集合，是共享代码的一种方式。</p><p>库从广义上可分为开源库和闭源库，而闭源库才分为静态库和动态库</p><h2 id="开源库"><a href="#开源库" class="headerlink" title="开源库"></a>开源库</h2><p>对外公开源码，能看到具体的代码实现，例如github上的第三方开源库都称为开源库。</p><h2 id="闭源库"><a href="#闭源库" class="headerlink" title="闭源库"></a>闭源库</h2><p>不公开源代码，文件是经过编译后的二进制文件，看不见具体实现，例如.a和.framework文件。</p><h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><p>链接时完整地拷贝至可执行文件中，被多次使用就是有多份冗余拷贝。</p><p>有两种存在形式：.a和.framework</p><h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><p>动态库不会复制，只有一份，程序运行时动态加载到内存；系统只加载一次，多个程序共用，节省内存。</p><p>有两种存在形式：.dylib和.framework</p><p>注意的是：系统的.framework是动态库，我们自己建立的.framework是静态库</p><p>但是项目中用到自己的动态库，苹果不允许上架！</p><h2 id="a"><a href="#a" class="headerlink" title=".a"></a>.a</h2><p>.a文件是一个纯二进制文件不能直接使用，必须要有.h文件才能使用，.h文件对外提供接口，.a文件是代码的具体实现，即.m。</p><h2 id="framework"><a href="#framework" class="headerlink" title=".framework"></a>.framework</h2><p>.framework中除了二进制文件之外还有资源文件，可以直接使用。</p><p>所以开发中建议使用.framework</p><h2 id="静态库的架构"><a href="#静态库的架构" class="headerlink" title="静态库的架构"></a>静态库的架构</h2><p>1、在不同的环境下静态库支持的架构也是不同的，模拟器下的静态库和真机下的静态库不能共用，不同型号编译的静态库也是不能共用的。</p><p>2、不同设备使用的CPU不同，从而使用的CPU架构（指令集）也不同，静态库有其支持的CPU架构，如果静态库在不支持的CPU架构上运行程序机会崩溃。</p><h3 id="模拟器使用的CPU架构"><a href="#模拟器使用的CPU架构" class="headerlink" title="模拟器使用的CPU架构"></a>模拟器使用的CPU架构</h3><p>iPhone4s - iPhone5: i386；</p><p>iphone5s - iPhoneX：x86_64;</p><h3 id="真机使用的CPU架构"><a href="#真机使用的CPU架构" class="headerlink" title="真机使用的CPU架构"></a>真机使用的CPU架构</h3><p>iPhone3gs - iPhone4s：armv7；</p><p>iphone5 - iPhone5c：armv7s；</p><p>iPhone5s - iPhoneX：armv64；</p><h3 id="查看静态库所支持的架构"><a href="#查看静态库所支持的架构" class="headerlink" title="查看静态库所支持的架构"></a>查看静态库所支持的架构</h3><p>使用终端，cd到静态库所在的目录，在执行lipo -info 静态库名称即可。</p><h3 id="如何编译多架构静态库"><a href="#如何编译多架构静态库" class="headerlink" title="如何编译多架构静态库"></a>如何编译多架构静态库</h3><p>怎样一次编译支持多个架构的静态库？</p><p>去工程的Build Settings 里面去修改 Build Active Architecture Only,这个选项是默认的YES，意思是只编译当前活跃环境的架构，设置成NO即可。</p><p><img src="/2020/01/02/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0-02/WX20200103-134203@2x.png" alt="WX20200103-134203@2x">设置以后模拟器编译出来的就支持所有模拟器型号，真机亦是如此。</p><h2 id="静态库的版本"><a href="#静态库的版本" class="headerlink" title="静态库的版本"></a>静态库的版本</h2><p>和iOS证书一样分调试版本（Debug）和发布版本（Release）</p><p>真机 - Debug和Release；</p><p>模拟器 - Debug和Release；</p><h3 id="调试版本Debug"><a href="#调试版本Debug" class="headerlink" title="调试版本Debug"></a>调试版本Debug</h3><p>真机 - Debug版本和模拟器 - Debug版本</p><p>调试版本的特点：</p><p>调试版本会包含完整的符号信息，以方便调试。</p><p>调试版本不会带代码进行优化。</p><h3 id="发布版本Release"><a href="#发布版本Release" class="headerlink" title="发布版本Release"></a>发布版本Release</h3><p>发布版本的特点：</p><p>发布版本不会包含完整的符号信息。</p><p>发布版本的执行代码是进行过优化的。</p><p>发布版本的小大会闭调试版本的略小。</p><p>在执行速度方面，发布版本会更快些，但不意味着会有显著的提升。</p><h2 id="生成不同版本的静态库"><a href="#生成不同版本的静态库" class="headerlink" title="生成不同版本的静态库"></a>生成不同版本的静态库</h2><p>选择项目 -&gt; Edit Scheme -&gt; Run -&gt; Release/Debug分别进行编译，即可得到不同版本的静态库。<img src="/2020/01/02/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0-02/WX20200103-140029@2x.png" alt="WX20200103-140029@2x"></p><h2 id="生成-a和-h文件"><a href="#生成-a和-h文件" class="headerlink" title="生成.a和.h文件"></a>生成.a和.h文件</h2><p>正常情况下，生成的.h文件是在<code>..//include/$(PRODUCT_NAME)</code>目录下的，<code>$(PRODUCT_NAME)</code>指的是项目名称。</p><p><img src="/2020/01/02/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0-02/WX20200103-142612@2x.png" alt="WX20200103-142612@2x"></p><p>修改Subpath的路径地址，即可修改.h文件生成的路径，填空即为和.a文件在统计目录下。</p><p>在Products文件夹下，command + B编译之后，show in Finder即可找到生成的静态库。</p><h2 id="合并静态库"><a href="#合并静态库" class="headerlink" title="合并静态库"></a>合并静态库</h2><p>因为静态库针对模拟器和真机生成了不同的版本（支持不同架构），所以没发同时运行。</p><p>合并后的静态库既可以在真机上调试，也可以在模拟器上调试，省去了来回切换的麻烦。</p><p>但是合并以后的静态库大小是模拟器和真机的大小之和，如果静态库太大。合并打包后，会非常大。因此很多第三方的静态库的.a是区分版本的。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下所有方式得到的静态库都可以通过lipo -info xx.a方式检测现有的架构, 注意要在xx.a所在的目录下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 合并静态库</span></span><br><span class="line">lipo -create 静态库<span class="number">1</span>路径 静态库<span class="number">2</span>路径 -output 合并后的静态库名称</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">lipo -create /Users/xxx/Debug-iphoneos/libStateLib.a /Users/xxx/Debug-iphonesimulator/libStateLib.a -output hahah.a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 移除某一个架构</span></span><br><span class="line">lipo -remove 架构名称 静态库绝对路径 -output 新的静态库名字</span><br><span class="line">lipo -remove arm64 /Users/xxx/Build/Products/hahah.a -output ha_arm64.a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 拆分出一个单独架构的静态库</span></span><br><span class="line">lipo -thin 架构名称 静态库绝对路径 -output 新的静态库名字</span><br><span class="line">lipo -thin arm64 /Users/xxx/Build/Products/hahah.a -output only_arm64.a</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 本章主要内容是了解SDK，静态库.a文件和.framework文件的各种概念。因为根据需求制作以上的文件的目的是解耦，给别人用又不想别人看见我们的源码。做SDK都是做静态库也就是.a和.framework文件。为了准确区分各种概念问题，对所有的概念问题做一个汇总。&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS组件化学习-01</title>
    <link href="http://yoursite.com/2019/12/05/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0-01/"/>
    <id>http://yoursite.com/2019/12/05/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0-01/</id>
    <published>2019-12-05T05:40:45.000Z</published>
    <updated>2025-09-19T02:45:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a><strong>前言:</strong></h1><p> 本章开始学习如何进行工程的组件化，主要内容是本地私有库的制作和如何关联远程私有库。并将本地私有pod push 进本地私有库。</p> <a id="more"></a></blockquote><h1 id="组件化的方案："><a href="#组件化的方案：" class="headerlink" title="组件化的方案："></a>组件化的方案：</h1><p>1、蘑菇街的URL方案：</p><p>2、runtime + 命令模式的方案：</p><p>3、协议的方案</p><h1 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h1><h2 id="什么是组件化："><a href="#什么是组件化：" class="headerlink" title="什么是组件化："></a>什么是组件化：</h2><p>将一个工程分解为各个组件，然后按照某种方式任意组织成为一个拥有完整业务逻辑的工程。</p><h2 id="组件化的优缺点"><a href="#组件化的优缺点" class="headerlink" title="组件化的优缺点"></a>组件化的优缺点</h2><p>优点：1、组件的独立性                     </p><p>​            2、资源重用</p><p>​            3、高效迭代性</p><p>​            4、配合二进制，加快项目的编译速度</p><p>缺点：1、组件的粒度大小</p><p>​            2、区分业务组件以及基础业务组件</p><h2 id="组件划分"><a href="#组件划分" class="headerlink" title="组件划分"></a>组件划分</h2><h3 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h3><p>基础配置（宏，常量），分类，网络（AFN，SDW二次封装），工具类（日期时间的处理，文件处理，设备处理）</p><h3 id="功能组件"><a href="#功能组件" class="headerlink" title="功能组件"></a>功能组件</h3><p>控件（弹幕，轮播图，选项卡）；功能（断点续传，音频处理）</p><h3 id="业务组件"><a href="#业务组件" class="headerlink" title="业务组件"></a>业务组件</h3><p>业务线一，业务线二….</p><h1 id="本地库"><a href="#本地库" class="headerlink" title="本地库"></a>本地库</h1><p>利用Cocoapods将我们抽取出的代码模块制作成pod集成到我们的工程。</p><h2 id="pod-引用"><a href="#pod-引用" class="headerlink" title="pod 引用"></a>pod 引用</h2><p>pod install命令引入pod：</p><p>每一个pod里面均有一个Spec文件（描述框架信息文件（框架名称，框架版本号，框架真实源码））。</p><h2 id="执行pod-install"><a href="#执行pod-install" class="headerlink" title="执行pod install"></a>执行pod install</h2><p>​    1、先去找本地的.Spec文件。</p><p>​    2、如果没有，再去远程仓库将.Spec文件拉到本地，在执行1.</p><h2 id="本地-Spec的文件："><a href="#本地-Spec的文件：" class="headerlink" title="本地.Spec的文件："></a>本地.Spec的文件：</h2><p>​    pod setup将远程仓库的Spec文件拉到本地。</p><h1 id="创建本地私有库"><a href="#创建本地私有库" class="headerlink" title="创建本地私有库"></a>创建本地私有库</h1><h2 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h2><blockquote><p>终端: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;想要创建位置的文件夹&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec create &lt;本地库名字&gt; </span><br></pre></td></tr></table></figure></blockquote><p>以上这种方式不推荐，因为部分s.source_files文件内容等需要自己填写，Classes，FILE_LICENSE等文件需要自己创建。太麻烦，弃用。</p><blockquote><p>终端:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib create &lt;本地库名字&gt;</span><br></pre></td></tr></table></figure></blockquote><p>回答相应的问题即可。生成的文件如下:</p><p><img src="/2019/12/05/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0-01/WX20191205-163627@2x.png" alt="WX20191205-163627@2x"></p><p><img src="/2019/12/05/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0-01/WX20191205-163816@2x.png" alt="WX20191205-163627@2x"></p><p>至此：本地私有库搭建完成。</p><h1 id="创建并设置一个私有的Spec-Repo"><a href="#创建并设置一个私有的Spec-Repo" class="headerlink" title="创建并设置一个私有的Spec Repo"></a>创建并设置一个私有的Spec Repo</h1><h2 id="什么是Spec-Repo？"><a href="#什么是Spec-Repo？" class="headerlink" title="什么是Spec Repo？"></a>什么是Spec Repo？</h2><p>它是所有的Pods的一个索引，一个容器，所有的公开的Pods都在这个里面，它实际是一个Git仓库remote端在GitHub上，当你使用Cocoapods后它会被clone到本地的~/.cocoapods/repos目录下，可以进入这个目录看到master文件夹就试这个官方的Spec Repo了，这个master目录结构是这个样子的</p><blockquote><p>├── Specs<br>└── [SPEC_NAME]<br>└── [VERSION]<br>└── [SPEC_NAME].podspec</p></blockquote><h2 id="创建本地索引库并与远程库相关联"><a href="#创建本地索引库并与远程库相关联" class="headerlink" title="创建本地索引库并与远程库相关联"></a>创建本地索引库并与远程库相关联</h2><p>1、首先我们在GitHub上创建一个自己的仓库（repository Name）</p><p>2、在本地创建Spec Repo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#pod repo add [Private Repo Name] [对应的.git URL]</span><br><span class="line">$pod repo add xlp_test https:&#x2F;&#x2F;github.com&#x2F;liping-xu&#x2F;xlp_test.git</span><br></pre></td></tr></table></figure><p>进~/.cocoapods/repos目录就能看见我们自己的pod仓库了。至此第一步创建私有Spec Repo完成。</p><p><img src="/2019/12/05/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0-01/WX20191212-110154@2x.png" alt="WX20191212-110154@2x"></p><p>执行 pod repo list查看repo列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod repo list</span><br></pre></td></tr></table></figure><p><img src="/2019/12/05/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0-01/WX20191212-110421@2x.png" alt="WX20191212-110421@2x"></p><p> PS:如果有其他合作人员共同使用这个私有Spec Repo的话在他有对应Git仓库的权限的前提执行相同的命令添加这个Spec Repo即可</p><h2 id="编辑Pod文件夹并与远程库相关联"><a href="#编辑Pod文件夹并与远程库相关联" class="headerlink" title="编辑Pod文件夹并与远程库相关联"></a>编辑Pod文件夹并与远程库相关联</h2><p>向Pod文件夹中添加库文件和资源，并配置podspec文件。</p><h3 id="添加代码和图片等资源文件"><a href="#添加代码和图片等资源文件" class="headerlink" title="添加代码和图片等资源文件"></a>添加代码和图片等资源文件</h3><p>在上面那张生成Lib的图里面可以看见放置代码和图片的位置，</p><p>在pod/Classes中添加代码，在pod/Assets里面添加图片。然后进入终端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$cd Example</span><br><span class="line">$pod update</span><br></pre></td></tr></table></figure><p>再打开项目工程就可以看见刚添加的文件了。</p><p>注：这里需要注意是的每当你向Pod添加了新的文件或者以后更新了podspec的版本都需要重新执行pod update命令。</p><p>测试无误后将项目添加并推送到远端仓库，并编辑podspec文件</p><h3 id="编辑podspec文件并与远程库"><a href="#编辑podspec文件并与远程库" class="headerlink" title="编辑podspec文件并与远程库"></a>编辑podspec文件并与远程库</h3><p>首先通过Cocoapods创建出来的目录本身就在本地的Git管理下，我们需要做的就是将它添加到远端仓库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;lib文件夹&gt;</span><br></pre></td></tr></table></figure><p>git提交相应的代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -s -m &quot;初始化library&quot;</span><br></pre></td></tr></table></figure><p>git 添加远端仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># git remote add origin &lt;.git URL&gt; </span><br><span class="line">$ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;liping-xu&#x2F;tool_test.git</span><br></pre></td></tr></table></figure><p>git 推送到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>因为podspec文件中获取git版本控制的项目需要tag号，所以需要打个tag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -m &quot;第一次提交&quot; &quot;0.1.0&quot;</span><br></pre></td></tr></table></figure><p>推送tag到远端仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --tags</span><br></pre></td></tr></table></figure><p>打开lib文件中的例子工程Example/tools_test.xworkspace，编辑tools_test.podspec文件</p><p><img src="/2019/12/05/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0-01/WX20191212-204611@2x.png" alt="WX20191212-204611@2x"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">s.name             &#x3D; &#39;tools_test &#39; ##名字必须与libname相同</span><br><span class="line">s.version          &#x3D; &#39;0.1.0&#39;     #版本必须为0.0.0格式</span><br><span class="line">s.summary          &#x3D; ’这是测试库‘ #关于库的一个简短的描述</span><br><span class="line">s.description      &#x3D; &lt;&lt;-DESC</span><br><span class="line">TODO: 备注文字(较长描述)</span><br><span class="line">                            DESC</span><br><span class="line"></span><br><span class="line">#是否支持arc</span><br><span class="line"></span><br><span class="line">s.requires_arc &#x3D; true</span><br><span class="line"></span><br><span class="line">#文件主页</span><br><span class="line"></span><br><span class="line">s.homepage         &#x3D; &#39;https:&#x2F;&#x2F;github.com&#x2F;liping-xu&#39;</span><br><span class="line"></span><br><span class="line">#开源协议</span><br><span class="line"></span><br><span class="line">s.license          &#x3D; &#123; :type &#x3D;&gt; &#39;MIT&#39;, :file &#x3D;&gt; &#39;LICENSE&#39; &#125;</span><br><span class="line"></span><br><span class="line">#作者信息</span><br><span class="line"></span><br><span class="line">s.author           &#x3D; &#123; &#39;Maoyis&#39; &#x3D;&gt; &#39;xxxxxx@qq.com&#39; &#125;</span><br><span class="line"></span><br><span class="line">#源文件所在网络路径</span><br><span class="line"></span><br><span class="line">s.source           &#x3D; &#123; :git &#x3D;&gt; &#39;https:&#x2F;&#x2F;github.com&#x2F;liping-xu&#x2F;tools_test.git&#39;, :tag &#x3D;&gt; s.version.to_s &#125;</span><br><span class="line"></span><br><span class="line">#支持版本</span><br><span class="line"></span><br><span class="line">s.ios.deployment_target &#x3D; &#39;7.0&#39;</span><br><span class="line"></span><br><span class="line">#公开头文件名</span><br><span class="line"></span><br><span class="line">s.public_header_files &#x3D; &#39;Pod&#x2F;Classes&#x2F;**&#x2F;*.h&#39;</span><br><span class="line"></span><br><span class="line">#依赖的框架</span><br><span class="line"></span><br><span class="line">s.frameworks &#x3D; &#39;UIKit&#39;, &#39;MapKit&#39;</span><br><span class="line"></span><br><span class="line">#依赖库</span><br><span class="line"></span><br><span class="line">s.dependency &#39;AFNetworking&#39;, &#39;~&gt; 2.3&#39;</span><br></pre></td></tr></table></figure><p>以上.podspec文件最重要的三个地方要填写正确</p><p>这个是资源地址：放置你的源码和资源文件的地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.source           &#x3D; &#123; :git &#x3D;&gt; &#39;https:&#x2F;&#x2F;github.com&#x2F;liping-xu&#x2F;tools_test.git&#39;, :tag &#x3D;&gt; s.version.to_s &#125;</span><br></pre></td></tr></table></figure><p>这个是主页地址：如果是私有库的话可以填写自己的github主页地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.homepage         &#x3D; &#39;https:&#x2F;&#x2F;github.com&#x2F;liping-xu&#39;</span><br></pre></td></tr></table></figure><p>这个是tag值，在git里面打的tag值必须和podspec文件里面的一致，否则报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.version          &#x3D; &#39;0.1.0&#39;     #版本必须为0.0.0格式</span><br></pre></td></tr></table></figure><p>到此检查一下你的本地和远程pod是否正确，在终端里面输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod spec lint</span><br></pre></td></tr></table></figure><p><img src="/2019/12/05/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0-01/WX20191212-214537@2x.png" alt="WX20191212-214537@2x"></p><p>这样表示验证通过。</p><p>ps：这里指令有两种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod lib lint</span><br></pre></td></tr></table></figure><p>上面这种写法表示只验证本地库中的pod是否正确</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod spec lint</span><br></pre></td></tr></table></figure><p>上面这种写法表示从本地库和远程库两个方面去验证pod是否正确。</p><h3 id="将lib-podsepc文件提交本地索引库"><a href="#将lib-podsepc文件提交本地索引库" class="headerlink" title="将lib.podsepc文件提交本地索引库"></a>将lib.podsepc文件提交本地索引库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod repo push &lt;本地仓库名称&gt; &lt;本地pod名称&gt;.podspec</span><br></pre></td></tr></table></figure><h1 id="清坑"><a href="#清坑" class="headerlink" title="清坑"></a>清坑</h1><p>这里有些坑需要理一下。</p><p>首先在创建私有库，在终端pod repo add的时候创建远程仓库时候</p><p><img src="/2019/12/05/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0-01/WX20191212-202203@2x.png" alt="WX20191212-202203@2x"></p><p>这个要点上，不然远程仓库没有master分支，导致后面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod repo push &lt;本地仓库名&gt; &lt;创建的pod名&gt;.podspec</span><br></pre></td></tr></table></figure><p>失败。原因就在于没有master分支。</p><p><img src="/2019/12/05/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0-01/WX20191212-202911@2x.png" alt="WX20191212-202911@2x"></p><p>这样就导致push失败。如下图所示:</p><p><img src="/2019/12/05/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0-01/WX20191212-215048@2x.png" alt="WX20191212-215048@2x"></p><p>至此，本地库与远程库关联并且搭建完成。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言:&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 本章开始学习如何进行工程的组件化，主要内容是本地私有库的制作和如何关联远程私有库。并将本地私有pod push 进本地私有库。&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
</feed>
